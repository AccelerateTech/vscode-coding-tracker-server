#!/usr/bin/env node

const SOURCE_PATH = `${__dirname}/src`;
const MODULE_PATH = `${__dirname}/src/modules`;
const DIST_PATH = `${__dirname}/dist`;

const JS_SOURCE_PATH = `${__dirname}/src/js`;
const JS_DIST_PATH = `${__dirname}/dist/js`;

var fs = require('fs-extra'),
	colors = require('colors');

function main(done) {
	//unlink dist folder
	fs.existsSync(DIST_PATH) && fs.removeSync(DIST_PATH);
	fs.existsSync(JS_DIST_PATH) && fs.removeSync(JS_DIST_PATH);
	
	//mkdir
	fs.mkdirSync(DIST_PATH);
	fs.mkdirsSync(JS_DIST_PATH);
	
	//handler HTML file
	fs.readdirSync(SOURCE_PATH).forEach(fileName =>
		fileName.endsWith('.html') &&
		fs.statSync(`${SOURCE_PATH}/${fileName}`).isFile() &&
		handlerHTMLFile(fileName));
	
	//COPY JS
	fs.readdirSync(JS_SOURCE_PATH).forEach(fileName => {
		var filePath = `${JS_SOURCE_PATH}/${fileName}`;
		if (!fs.statSync(filePath).isFile()) return;
		if (fileName.endsWith('.js'))
			fs.copySync(filePath, `${JS_DIST_PATH}/${fileName}`);
	});
	

	done();
	function handlerHTMLFile(fileName) {
		var distFile = `${DIST_PATH}/${fileName}`;
		var srcFile = `${SOURCE_PATH}/${fileName}`;
		var content = fs.readFileSync(srcFile, 'utf8'),
			lastContent = '',
			maxTime = 16;
		do {
			lastContent = content;
			content = content.replace(/(\s)\=`([\w\.]+)`(\s)/g, (_, a, name, b) =>
				`${a}${fs.readFileSync(MODULE_PATH + '/' + name + '.html', 'utf8')}${b}`);
		} while (lastContent != content && maxTime--);
		fs.writeFileSync(distFile, content, 'utf8');
	}
}

//--------------------
//	Launcher
//--------------------
function launcher(isWatchMode) {
	const LINE = new Array(60).fill('-').join('');
	var startTime = Date.now();
	try {
		main(done);
	} catch (e) {
		console.error(e.stack);
		done(1);
	}
	function done(status) {
		var endTime = Date.now();
		console.log(`\n${LINE}\n     ${
			(status?('PROCESS FRONTEND PAGES FAILED WITH EXIT CODE: '+ status).red:'PROCESS FRONTEND PAGES SUCCESS!'.green)
		}   cost: ${(endTime - startTime)} ms\n${LINE}\n`);
		isWatchMode || process.exit(status || 0);
	}
};

var launchParams = process.argv;
if (launchParams.indexOf('-w') > 0 || launchParams.indexOf('--watch') > 0) {
	const watch = require('watch');
	watch.unwatchTree(SOURCE_PATH);
	watch.watchTree(SOURCE_PATH, { interval: 0.5 }, () => launcher(true));
} else {
	launcher();
}