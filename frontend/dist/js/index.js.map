{
	"version": 3,
	"sources": [
		"../../../../../../../../usr/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js",
		"../../src/js/charts/24hours.js",
		"../../src/js/charts/all_languages.js",
		"../../src/js/charts/all_projects.js",
		"../../src/js/charts/computer.js",
		"../../src/js/charts/file.js",
		"../../src/js/charts/language.js",
		"../../src/js/charts/one_project.js",
		"../../src/js/charts/project.js",
		"../../src/js/charts/summary.js",
		"../../src/js/echartsUtils.js",
		"../../src/js/form.js",
		"../../src/js/i18n.js",
		"../../src/js/i18n/zh-cn.js",
		"../../src/js/i18n/zh-tw.js",
		"../../src/js/index.js",
		"../../src/js/share.js",
		"../../src/js/statusDialog.js",
		"../../src/js/url.js",
		"../../src/js/utils.js"
	],
	"names": [],
	"mappings": "0eAAA,2cCAA,AACA,AACA,AACA,AACA,SAMA,gBALA,wBACA,gBACA,iBACA,yBACA,UAKA,AACA,uBAJA,wBACA,iBACA,cAGA,AACA,sBACA,iBACA,+CACA,8BACA,yDACA,+CACA,0DACA,gDACA,0CACA,sBACA,6FACA,mBACA,KACA,AACA,AACA,AACA,CACA,MACA,KACA,WACA,UACA,aACA,2BACA,AACA,UACA,SACA,mCACA,AACA,mBACA,mDACA,iCACA,OACA,+BACA,oBACA,UACA,6BACA,4BACA,gBACA,6BACA,wBACA,wBACA,yBACA,aACA,AACA,oBACA,2BACA,4BACA,gBACA,6BACA,wBACA,wBACA,yBACA,WACA,AACA,AACA,aACA,2DCzEA,AACA,AACA,AACA,AACA,SAKA,gBAJA,qBACA,wBACA,iBACA,yBAIA,AACA,uBAHA,wBACA,cAGA,mBACA,AACA,iBACA,gBACA,AACA,6EACA,aACA,UACA,aACA,OACA,eACA,qCACA,WACA,QACA,QACA,CACA,iBACA,+CACA,0CACA,mEACA,UACA,AACA,AACA,AACA,CACA,MACA,OACA,OACA,OACA,EACA,gCACA,aACA,OACA,GACA,UACA,mBACA,CACA,MACA,QACA,aACA,GACA,uBACA,8CACA,cACA,yCACA,eACA,IACA,YACA,2BACA,AACA,UACA,cACA,AACA,WACA,aACA,6BACA,qBACA,2BACA,MACA,QACA,WACA,mBACA,CACA,CACA,AACA,kCACA,mBACA,qCACA,cACA,KACA,+BACA,oBACA,SACA,YACA,eACA,2BACA,aACA,AACA,AACA,aACA,wEC9FA,AACA,AACA,AACA,AACA,SAMA,gBALA,qBACA,wBACA,iBACA,yBACA,wBAKA,AACA,uBAJA,wBACA,eACA,cAGA,sBACA,AACA,AACA,AACA,AACA,8BACA,GACA,iBACA,+CACA,cACA,kCACA,uEACA,YACA,AACA,AACA,AACA,CACA,MACA,OACA,OACA,KACA,qBACA,aACA,OACA,GACA,UACA,mBACA,CACA,MACA,QACA,YACA,OACA,qBACA,4BACA,iCACA,SACA,oCACA,WACA,CACA,EACA,AACA,OACA,SACA,AACA,mCACA,uDACA,gBACA,8DACA,AACA,4BACA,QACA,oBACA,AACA,uBACA,eACA,WACA,0CACA,wCACA,iBACA,8BACA,AACA,mEACA,KACA,QACA,+BACA,oBACA,SACA,yBACA,yBACA,aACA,AACA,AACA,aACA,gLCzFA,AACA,AACA,AACA,AACA,SAKA,gBAJA,qBACA,wBACA,iBACA,yBAIA,AACA,uBAHA,wBACA,qFAGA,aACA,iBACA,iBACA,+CACA,0CACA,mEACA,UACA,AACA,AACA,AACA,CACA,MACA,KACA,WACA,UACA,aACA,2BACA,AACA,UACA,SACA,AACA,kBACA,CACA,QACA,+BACA,oBACA,SACA,YACA,oDACA,sBACA,aACA,AACA,AACA,aACA,2DChDA,AACA,AACA,AACA,AACA,SAKA,gBAJA,qBACA,wBACA,iBACA,yBAKA,AACA,uBAJA,wBACA,eACA,cAGA,eACA,AACA,AACA,AACA,AACA,IACA,GACA,iBACA,+CACA,cACA,kCACA,uEACA,YACA,AACA,AACA,AACA,CACA,MACA,KACA,WACA,UACA,aACA,2BACA,AACA,UACA,qBACA,MACA,AACA,mDACA,gBACA,2DACA,AACA,yBACA,eACA,WACA,0CACA,wCACA,iBACA,8BACA,wDACA,KACA,QACA,+BACA,oBACA,SACA,yBACA,yBACA,aACA,AACA,AACA,aACA,2DClEA,AACA,AACA,AACA,AACA,SAKA,gBAJA,qBACA,wBACA,iBACA,yBAIA,AACA,uBAHA,wBACA,qFAGA,gEACA,AACA,aACA,AACA,sBACA,iBACA,+CACA,0CACA,sFACA,WACA,AACA,AACA,AACA,CACA,MACA,KACA,WACA,UACA,aACA,2BACA,AACA,UACA,cACA,AACA,cACA,6BACA,qBACA,2BACA,MACA,QACA,6DACA,gBACA,mBACA,CACA,AACA,aACA,OACA,QACA,+BACA,oBACA,SACA,YACA,oDACA,sBACA,aACA,AACA,AACA,aACA,2DC9DA,AACA,AACA,AACA,AACA,SASA,gBARA,qBACA,wBACA,gBACA,iBACA,yBACA,4BACA,wBACA,UAKA,uBAHA,wBACA,eACA,gBAGA,AACA,eAFA,OAGA,yBACA,8BACA,0BACA,AACA,mBACA,gBACA,cACA,iBACA,+CACA,8BACA,yDACA,6CACA,0DACA,8CACA,0CACA,sBACA,2FACA,mBACA,KACA,CACA,iBACA,+CACA,cACA,kCACA,uEACA,YACA,AACA,AACA,AACA,CACA,oBACA,OACA,AACA,AACA,AACA,OACA,gBACA,KACA,AACA,UACA,GACA,gCACA,eACA,OACA,GACA,qCACA,qDACA,MACA,gCACA,AACA,eACA,IACA,GACA,EACA,CACA,IACA,MACA,QACA,aACA,GACA,uBACA,8CACA,cACA,yCACA,eACA,GACA,AACA,AACA,AACA,CACA,YACA,2BACA,AACA,aACA,WACA,iCACA,AACA,oCACA,OACA,AACA,WACA,SACA,mCACA,eACA,AACA,mBACA,QACA,kCACA,OACA,+BACA,oBACA,UACA,6BACA,4BACA,gBACA,6BACA,wBACA,wBACA,yBACA,aACA,oBACA,2BACA,4BACA,gBACA,6BACA,wBACA,wBACA,yBACA,WACA,AACA,AACA,aACA,CACA,YACA,2BACA,sBACA,UACA,QACA,kBACA,AACA,mBACA,QACA,oBACA,AACA,2DACA,gBACA,2DACA,AACA,yBACA,eACA,WACA,0CACA,wCACA,iBACA,8BACA,AACA,mEACA,KACA,QACA,+BACA,oBACA,SACA,yBACA,yBACA,iDACA,cACA,AACA,AACA,aACA,qFC1KA,AACA,AACA,AACA,AACA,SAMA,gBALA,qBACA,wBACA,iBACA,yBACA,wBAKA,AACA,uBAJA,wBACA,eACA,cAGA,kBACA,AACA,AACA,AACA,AACA,cACA,GACA,iBACA,+CACA,cACA,kCACA,uEACA,YACA,AACA,AACA,AACA,CACA,MACA,KACA,WACA,UACA,aACA,OACA,qBACA,iBACA,uCACA,sCACA,aACA,AACA,OACA,qBACA,iCACA,uDACA,gBACA,8DACA,AACA,yBACA,eACA,WACA,0CACA,wCACA,iBACA,8BACA,wDACA,KACA,QACA,+BACA,oBACA,SACA,yBACA,yBACA,aACA,AACA,AACA,aACA,gLCvEA,AACA,AACA,AACA,AACA,SAMA,gBALA,qBACA,gBACA,iBACA,yBACA,UAKA,AACA,uBAJA,wBACA,eACA,cAGA,AACA,qBACA,iBACA,+CACA,8BACA,yDACA,6CACA,0DACA,8CACA,0CACA,sBACA,2FACA,mBACA,KACA,AACA,AACA,AACA,CACA,MACA,KACA,WACA,UACA,aACA,2BACA,AACA,UACA,SACA,mCACA,AACA,mBACA,QACA,kCACA,OACA,+BACA,oBACA,UACA,6BACA,4BACA,gBACA,6BACA,wBACA,wBACA,yBACA,aACA,AACA,oBACA,2BACA,4BACA,gBACA,6BACA,wBACA,wBACA,yBACA,WACA,AACA,AACA,aACA,6DCzEA,UACA,CACA,uDACA,kDACA,qFACA,4EACA,AACA,AACA,AACA,AACA,AACA,AACA,OACA,eACA,OACA,aACA,UACA,qFACA,gGACA,kEACA,AACA,wEACA,6EACA,6EACA,AACA,+DACA,iGACA,AACA,oDACA,gDACA,uCACA,oDACA,iDACA,uCACA,AACA,kIACA,AACA,AACA,gCACA,mEAEA,oCADA,cAEA,kCC1CA,AACA,AACA,AACA,AACA,AACA,CACA,aACA,OACA,sCACA,OACA,sBACA,2BACA,gBACA,UACA,GACA,QACA,AACA,AACA,AACA,AACA,CACA,eACA,MACA,sCACA,OACA,cACA,gBACA,uBACA,uBACA,OACA,EACA,AACA,AACA,AACA,CACA,yBACA,AACA,AACA,AACA,CACA,aACA,cACA,gDACA,QACA,CACA,UACA,iBACA,sCC/CA,AACA,CACA,MACA,qCACA,oBACA,WACA,0BACA,mBACA,GACA,oDACA,4CACA,CACA,YACA,SACA,aACA,OACA,SACA,+BACA,kCACA,SACA,eACA,kBACA,AACA,YACA,eACA,KACA,CACA,OACA,KACA,CACA,CACA,aACA,CACA,OACA,GACA,CACA,aACA,OACA,eACA,IACA,CACA,UACA,CACA,SACA,cACA,6BACA,4EC9CA,UACA,eACA,kDACA,4CACA,8CACA,iFACA,6CACA,2CACA,qDACA,AACA,+DACA,AACA,4BACA,6BACA,0BACA,6BACA,4CACA,yCACA,AACA,oCACA,wDACA,AACA,4DACA,2DACA,AACA,+BACA,iCACA,0DACA,AACA,2BACA,AACA,yCACA,yBACA,2BACA,AACA,qBACA,kBACA,wBACA,AACA,iCACA,sFACA,mFACA,AACA,8CACA,AACA,AACA,yDACA,gNACA,sCACA,yGACA,gGACA,+CACA,8FACA,qQACA,6DACA,2HACA,mDACA,qMACA,6BACA,sEACA,AACA,AACA,4KACA,2CACA,+BACA,yCACA,6CACA,yCACA,+BACA,gHACA,uECtEA,UACA,eACA,kDACA,4CACA,8CACA,iFACA,6CACA,2CACA,qDACA,AACA,+DACA,AACA,4BACA,6BACA,0BACA,6BACA,4CACA,yCACA,AACA,oCACA,wDACA,AACA,4DACA,2DACA,AACA,+BACA,gCACA,0DACA,AACA,2BACA,AACA,yCACA,yBACA,2BACA,AACA,qBACA,kBACA,wBACA,AACA,iCACA,sFACA,mFACA,AACA,8CACA,AACA,AACA,yDACA,gNACA,sCACA,yGACA,gGACA,+CACA,8FACA,qQACA,6DACA,2HACA,mDACA,oMACA,2BACA,sEACA,AACA,AACA,4KACA,2CACA,+BACA,yCACA,6CACA,yCACA,+BACA,gHACA,mFCtEA,AACA,AACA,CACA,YACA,OACA,AACA,6BACA,iCACA,oBACA,WACA,cACA,AACA,aACA,WACA,kCACA,+BACA,gCACA,+BACA,2BACA,+BACA,wCACA,uCACA,AACA,AACA,AACA,AACA,AACA,2BACA,AACA,SACA,8BACA,mBACA,kBACA,IACA,AACA,QACA,4DACA,AACA,WACA,2BACA,AACA,OACA,IACA,IACA,AACA,AACA,SACA,AACA,aACA,uBACA,oBACA,mBACA,sBACA,yBACA,mBACA,mBACA,AACA,AACA,AACA,mEACA,uDACA,yCACA,uCACA,AACA,cACA,KACA,0EACA,KACA,AACA,mDACA,2BACA,aACA,sBACA,KACA,mFACA,cACA,gCACA,eACA,GACA,EACA,AACA,aACA,uBACA,MACA,AACA,aACA,YACA,WACA,2BACA,AACA,aACA,YACA,UACA,yCACA,mEACA,qBACA,oBACA,CACA,AACA,cACA,UACA,WACA,iCACA,AACA,oCACA,SACA,+BACA,QACA,AACA,cACA,CACA,AACA,qBACA,kBACA,AACA,gDACA,sCACA,qCACA,iCACA,KACA,AACA,AACA,AACA,AACA,AACA,gBACA,qCACA,gGACA,KACA,AACA,kBACA,MACA,iBACA,cACA,gDACA,QACA,AACA,SACA,AACA,cACA,OACA,8GACA,iBACA,mCACA,2BACA,2BACA,oDACA,iDACA,KACA,AACA,OACA,MACA,SACA,EACA,waC1JA,AACA,AACA,AACA,AACA,AACA,SAMA,eALA,qBACA,gBACA,iBACA,yBACA,UAIA,sBAFA,wBACA,eAGA,AACA,AACA,AACA,AACA,yBALA,OAMA,AACA,AACA,AACA,AACA,AACA,kCACA,AACA,AACA,AACA,AACA,KACA,AACA,AACA,AACA,AACA,OACA,AACA,8CACA,yBACA,AACA,aACA,OACA,IACA,YACA,UACA,AACA,yBACA,cACA,OACA,CACA,eACA,OACA,SACA,mCACA,6CACA,OACA,uBACA,UACA,AACA,wFACA,QACA,kCACA,6DACA,aACA,UACA,6BACA,YACA,6BACA,wBACA,wBACA,yBACA,aACA,AACA,AACA,AACA,aACA,GACA,CACA,aACA,IACA,+BACA,MACA,YACA,OACA,2BACA,oEACA,4BACA,WACA,QACA,qBACA,0BACA,AACA,mBACA,UACA,+CACA,iBACA,6BACA,uDACA,aACA,AACA,yBACA,AACA,yBACA,MACA,YACA,AACA,AACA,AACA,CACA,aACA,0CACA,eACA,IACA,aACA,OACA,AACA,yBACA,0CACA,AACA,mDACA,yCACA,AACA,aACA,qBACA,gCACA,AACA,OACA,CACA,GACA,CACA,YACA,OACA,KACA,6CACA,OACA,iCACA,SACA,UACA,CACA,OACA,GACA,EACA,GACA,OACA,CACA,UACA,CACA,2BACA,cACA,0FCtJA,CACA,YACA,SACA,AACA,uBACA,AACA,yBACA,wBACA,AACA,0BACA,AACA,kEACA,6CACA,AACA,mCACA,AACA,oBACA,QACA,uBACA,SACA,OACA,GACA,AACA,cACA,QACA,kBACA,SACA,yDACA,OACA,GACA,aACA,cACA,GACA,EACA,2CClCA,AACA,CACA,MACA,iBACA,AACA,KACA,qBACA,8DACA,GACA,QACA,wBACA,AACA,gGACA,AACA,kGACA,AACA,AACA,8FACA,oCClBA,AACA,AACA,AACA,CACA,MACA,gEACA,MACA,0BACA,0BACA,iDACA,OACA,KACA,KACA,GACA,gBACA,0BACA,SACA,KACA,QACA,AACA,iFACA,YACA,QACA,WACA,aACA,GACA,gBACA,4BACA,EACA,CACA,QACA,AACA,EACA,cACA,AACA,sBACA,AACA,6EACA,yEACA,AACA,OACA,uBACA,AACA,sBACA,QACA,AACA,sBACA,mBACA,EACA,UACA,oDACA,CACA,wCACA,AACA,AACA,AACA,AACA,CACA,8DACA,AACA,AACA,AACA,AACA,CACA,8CACA,AACA,AACA,AACA,CACA,6EACA,AACA,AACA,AACA,CACA,mDACA,AACA,AACA,AACA,AACA,AACA,CACA,eACA,gBACA,wCACA,WACA,QACA,AACA,AACA,AACA,AACA,CACA,eACA,wFACA,WACA,QACA,AACA,AACA,AACA,AACA,CACA,aACA,8DACA,EACA,AACA,AACA,AACA,AACA,AACA,CACA,eACA,sDACA,IACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,CACA,iBACA,qIACA,mBACA,AACA,AACA,AACA,AACA,AACA,AACA,CACA,eACA,2BACA,kBACA,OACA,UACA,UACA,oBACA,AACA,WACA,CACA,QACA,AACA,AACA,AACA,CACA,YACA,yGACA",
	"file": "generated.js",
	"sourceRoot": "",
	"sourcesContent": [
		"(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
		"//@ts-check\n/// <reference path=\"../types/index.d.ts\" />\n\nlet {\n\tconvertUnit2Minutes,\n\torderByName,\n\tobject2array,\n\tgetEachFieldToFixed2,\n\tmerge\n} = require('../utils'), {\n\tcreateEChartsSeries,\n\tAXIS_MINUTES,\n\tGRID_NORMAL\n} = require('../echartsUtils');\n\nlet timeLabels = [];\n\nconst SELECTOR = '#chartLast24Hs';\nfunction tooltipFormatter(p, ticket, set){\n\tlet setText = text => (setTimeout(set, 1, ticket, text), text);\n\tif (p.componentType == 'markLine') //average\n\t\treturn setText(`Average ${p.seriesName} for <b>${p.value}</b> minutes`);\n\telse if (p.componentType == 'markPoint')\n\t\treturn setText(`Longest ${p.seriesName} for <b>${p.value}</b> minutes` +\n\t\t\t`<br/>in ${timeLabels[p.data.coord[0]]}`)\n\telse if (Array.isArray(p) && p.length == 2)\n\t\treturn setText(`In ${p[0].name}:<br/>` +\n\t\t\tp.map(it => `${it.seriesName} for <b>${it.value}</b> minutes`).join('<br/>'));\n\treturn setText(null);\n}\n\n/**\n * @type {EChartsObject}\n */\nlet charts = null;\n\nmodule.exports = { update };\n\nfunction update(dataGroupByDate) {\n\tif (!charts) charts = echarts.init($(SELECTOR)[0]);\n\n\tlet data = convertUnit2Minutes(dataGroupByDate),\n\t\tarray = orderByName(object2array(data));\n\ttimeLabels = array.map(it => it.name);\n\t\n\tcharts.setOption({\n\t\txAxis: { data: array.map(it => it.name.slice(11)) },//slice(11) remove yyyy-mm-dd\n\t\tyAxis: merge(AXIS_MINUTES, { boundaryGap: [0, 0.2] }),\n\t\tgrid: GRID_NORMAL,\n\t\ttooltip: { trigger: 'axis', formatter: tooltipFormatter},\n\t\tseries: [\n\t\t\tcreateEChartsSeries('line', 'watching')\n\t\t\t\t.showMaxMarkPoint('max time')\n\t\t\t\t.showAverageLine('average time')\n\t\t\t\t.setLineSmooth()\n\t\t\t\t.setLineColor('#29b6f6')\n\t\t\t\t.setItemColor('#29b6f6')\n\t\t\t\t.setAreaColor('#b3e5fc')\n\t\t\t\t.setValues(getEachFieldToFixed2(array, 'watching'))\n\t\t\t\t.toObject(),\n\n\t\t\tcreateEChartsSeries('line', 'coding')\n\t\t\t\t.showMaxMarkPoint('max time')\n\t\t\t\t.showAverageLine('average time')\n\t\t\t\t.setLineSmooth()\n\t\t\t\t.setLineColor('#01579b')\n\t\t\t\t.setItemColor('#01579b')\n\t\t\t\t.setAreaColor('#0288d1')\n\t\t\t\t.setValues(getEachFieldToFixed2(array ,'coding'))\n\t\t\t\t.toObject()\n\t\t]\n\t});\n}\n",
		"//@ts-check\n/// <reference path=\"../types/index.d.ts\" />\n\nlet {\n\tconvertUnit2Hour,\n\torderByWatchingTime,\n\tobject2array,\n\tgetEachFieldToFixed2,\n} = require('../utils'), {\n\tcreateEChartsSeries,\n\tGRID_NORMAL\n} = require('../echartsUtils');\n\nconst SELECTOR = '#chartAllLangs',\n\tDIALOG_SELECTOR = '#dlgAllLangs';\n\nconst CLASS_RANGE_DEFAULT = 'btn-default',\n\tCLASS_RANGE_SELECTED = 'btn-success';\n\nconst COLORS = ['#a5d6a7', '#80cbc4', '#90caf9', '#80deea', '#ef9a9a', '#ffcc80', '#bcaaa4'],\n\tCOLOR_OTHER = '#b0bec5';\n\nfunction getColors(range) {\n\tif (!range) return COLORS;\n\tlet result = [];\n\tfor (let i = 0; i < range; i++) result.push(COLORS[i % COLORS.length]);\n\tresult.push(COLOR_OTHER);\n\treturn result;\n}\n\nfunction tooltipFormatter(p, ticket, set) {\n\tlet setText = text => (setTimeout(set, 1, ticket, text), text);\n\treturn setText(`You spent<br/> <b>${p.percent}%</b> time` +\n\t\t`<br/>(<b>${p.value}</b> hours)<br/> on ${p.name} `);\n}\n\n/**\n * @type {EChartsObject}\n */\nlet charts = null;\nlet $dlg = null,\n\tdataGroupByLanguage = null,\n\trange = 0;\n\nmodule.exports = { update, setRange };\nfunction update(data) {\n\tif (!$dlg) {\n\t\t$dlg = $(DIALOG_SELECTOR);\n\t\t$dlg.on('shown.bs.modal', _update);\n\t}\n\tdataGroupByLanguage = data;\n\t$dlg.modal();\n}\nfunction setRange(_range) {\n\trange = Number(_range);\n\tlet $btns = $dlg.find('.range-block [data-range]');\n\t$btns.removeClass(CLASS_RANGE_SELECTED).addClass(CLASS_RANGE_DEFAULT);\n\t$btns.filter(`[data-range=${range}]`)\n\t\t.addClass(CLASS_RANGE_SELECTED).removeClass(CLASS_RANGE_DEFAULT);\n\t_update();\n}\nfunction _update() {\n\tif (!charts) charts = echarts.init($(SELECTOR)[0]);\n\t\n\tlet data = convertUnit2Hour(dataGroupByLanguage),\n\t\tarray = orderByWatchingTime(object2array(data), true/*DESC*/);\n\t\n\tif (range) {\n\t\tlet i0 = range, i1 = array.length;\n\t\tfor (let i = i0 + 1; i < i1; i++) {\n\t\t\tarray[i0].watching += array[i].watching;\n\t\t\tarray[i0].coding += array[i].coding;\n\t\t}\n\t\tif (i1 > i0) {\n\t\t\tarray[i0].name = 'other';\n\t\t\tarray.length = i0 + 1;\n\t\t}\n\t}\t\n\t\n\tlet langNames = array.map(it => it.name);\n\tcharts.setOption({\n\t\tlegend: { orient: 'vertical', x: 'right', data: langNames },\n\t\tcolor: getColors(range),\n\t\tgrid: GRID_NORMAL,\n\t\ttooltip: { trigger: 'item', formatter: tooltipFormatter },\n\t\tseries: [\n\t\t\tcreateEChartsSeries('pie', 'watching')\n\t\t\t\t.setLabelBold()\t\n\t\t\t\t.setLabels(langNames)\n\t\t\t\t.setValues(getEachFieldToFixed2(array, 'watching'))\n\t\t\t\t.toObject()\n\t\t]\n\t});\n}\n",
		"//@ts-check\n/// <reference path=\"../types/index.d.ts\" />\n\nlet {\n\tconvertUnit2Hour,\n\torderByWatchingTime,\n\tobject2array,\n\tgetEachFieldToFixed2,\n\tgetShortProjectName,\n} = require('../utils'), {\n\tcreateEChartsSeries,\n\tAXIS_HOURS,\n\tGRID_NORMAL\n} = require('../echartsUtils');\n\nconst SELECTOR = '#chartAllProjects',\n\tDIALOG_SELECTOR = '#dlgAllProjects';\n\n/**\n* @type {string[]}\n*/\nlet projectNames = [], shortProjectNames = [], originalProjectNames = [];\n\nfunction tooltipFormatter(p, ticket, set) {\n\tlet setText = text => (setTimeout(set, 1, ticket, text), text);\n\tlet i = p.dataIndex;\n\tif (i >= projectNames.length) return setText(null);\n\treturn setText(`You spent<br/> (<b>${p.value}</b> hours)<br/> on <u>${projectNames[i]}</u>`);\n}\n\n/**\n * @type {EChartsObject}\n */\nlet charts = null;\nlet $dlg = null;\nlet dataGroupByProject = null;\n\nmodule.exports = { update };\nfunction update(data) {\n\tif (!$dlg) {\n\t\t$dlg = $(DIALOG_SELECTOR);\n\t\t$dlg.on('shown.bs.modal', _update);\n\t}\n\tdataGroupByProject = data;\n\t$dlg.modal();\n}\nfunction _update() {\n\tif (!charts) {\n\t\tcharts = echarts.init($(SELECTOR)[0]);\n\t\tcharts.on('click', params => {\n\t\t\tif (typeof params.dataIndex == 'number') {\n\t\t\t\t$dlg.modal('hide');\n\t\t\t\tglobal.app.openProjectReport(originalProjectNames[params.dataIndex])\n\t\t\t}\n\t\t});\n\t}\n\t\n\tlet data = convertUnit2Hour(dataGroupByProject),\n\t\tarray = orderByWatchingTime(object2array(data));\n\n\toriginalProjectNames = array.map(it => it.name);\n\tprojectNames = array.map(it => decodeURIComponent(it.name));\n\tshortProjectNames = projectNames.map((name, i) =>\n\t\tgetShortProjectName(name) + ` (${Number(array[i].watching).toFixed(2)} hs)`);\n\t\n\tlet height = array.length * 50;\n\t$(SELECTOR).height(height);\n\tcharts.resize({ height });\n\t\n\tcharts.setOption({\n\t\tlegend: { data: [''] },\n\t\txAxis: {\n\t\t\ttype: 'value', nameLocation: 'end', position: 'top',\n\t\t\taxisTick: { show: false }, axisLabel: AXIS_HOURS.axisLabel },\n\t\tyAxis: {\n\t\t\ttype: 'category', nameLocation: 'start',\n\t\t\t// interval: 0 for force display all label\n\t\t\taxisTick: { show: false }, axisLabel: { inside: true, interval: 0 }, z: 1024,\n\t\t\tdata: shortProjectNames },\n\t\tgrid: GRID_NORMAL,\n\t\ttooltip: { trigger: 'item', formatter: tooltipFormatter},\n\t\tseries: [\n\t\t\tcreateEChartsSeries('bar', 'watching')\n\t\t\t\t.setItemColor('#fff59d')\n\t\t\t\t.setValues(getEachFieldToFixed2(array ,'watching'))\n\t\t\t\t.toObject()\n\t\t]\n\t});\n}\n",
		"//@ts-check\n/// <reference path=\"../types/index.d.ts\" />\n\nlet {\n\tconvertUnit2Hour,\n\torderByWatchingTime,\n\tobject2array,\n\tgetEachFieldToFixed2\n} = require('../utils'), {\n\tcreateEChartsSeries,\n\tGRID_NORMAL\n} = require('../echartsUtils');\n\nconst COLORS = ['#4caf50', '#2196f3', '#ffeb3b', '#f44336', '#9c27b0', '#009688', '#ff9800', '#795548'];\nconst SELECTOR = '#chartComputer';\n\nfunction tooltipFormatter(p, ticket, set) {\n\tlet setText = text => (setTimeout(set, 1, ticket, text), text);\n\treturn setText(`You spent<br/> <b>${p.percent}%</b> time` +\n\t\t`<br/>(<b>${p.value}</b> hours)<br/> on ${p.name} `);\n}\n\n/**\n * @type {EChartsObject}\n */\nlet charts = null;\n\nmodule.exports = { update };\n\nfunction update(dataGroupByComputer) {\n\tif (!charts) charts = echarts.init($(SELECTOR)[0]);\n\n\tlet data = convertUnit2Hour(dataGroupByComputer),\n\t\tarray = orderByWatchingTime(object2array(data));\n\n\tcharts.setOption({\n\t\tcolor: COLORS,\n\t\tgrid: GRID_NORMAL,\n\t\ttooltip: { trigger: 'item', formatter: tooltipFormatter },\n\t\tseries: [\n\t\t\tcreateEChartsSeries('pie', 'watching')\n\t\t\t\t.setLabelBold()\t\n\t\t\t\t.setLabels(array.map(it => it.name))\t\n\t\t\t\t.setValues(getEachFieldToFixed2(array, 'watching'))\n\t\t\t\t.toObject()\n\t\t]\n\t});\n}\n",
		"//@ts-check\n/// <reference path=\"../types/index.d.ts\" />\n\nlet {\n\tconvertUnit2Hour,\n\torderByWatchingTime,\n\tobject2array,\n\tgetEachFieldToFixed2,\n} = require('../utils'), {\n\tcreateEChartsSeries,\n\tAXIS_HOURS,\n\tGRID_NORMAL\n} = require('../echartsUtils');\n\nconst SELECTOR = '#chartFile';\nconst SIZE = 5;\n\n/**\n* @type {string[]}\n*/\nlet fileNames = [];\n\nfunction tooltipFormatter(p, ticket, set) {\n\tlet setText = text => (setTimeout(set, 1, ticket, text), text);\n\tlet i = p.dataIndex;\n\tif (i >= fileNames.length) return setText(null);\n\treturn setText(`You spent<br/> (<b>${p.value}</b> hours)<br/> on <u>${fileNames[i]}</u>`);\n}\n\n/**\n * @type {EChartsObject}\n */\nlet charts = null;\n\nmodule.exports = { update };\n\nfunction update(dataGroupByFile) {\n\tif (!charts) charts = echarts.init($(SELECTOR)[0]);\n\n\tlet data = convertUnit2Hour(dataGroupByFile),\n\t\tarray = orderByWatchingTime(object2array(data)).slice(-SIZE),\n\t\tdisplayFileNames = [];\n\t\n\tfileNames = array.map(it => decodeURIComponent(it.name));\n\tdisplayFileNames = fileNames.map((name, i) =>\n\t\tname + ` (${Number(array[i].watching).toFixed(2)} hs)`);\n\n\tcharts.setOption({\n\t\tlegend: { data: [''] },\n\t\txAxis: {\n\t\t\ttype: 'value', nameLocation: 'end', position: 'top',\n\t\t\taxisTick: { show: false }, axisLabel: AXIS_HOURS.axisLabel },\n\t\tyAxis: {\n\t\t\ttype: 'category', nameLocation: 'start',\n\t\t\taxisTick: { show: false }, axisLabel: { inside: true }, z: 1024,\n\t\t\tdata: displayFileNames },\n\t\tgrid: GRID_NORMAL,\n\t\ttooltip: { trigger: 'item', formatter: tooltipFormatter},\n\t\tseries: [\n\t\t\tcreateEChartsSeries('bar', 'watching')\n\t\t\t\t.setItemColor('#ce93d8')\n\t\t\t\t.setValues(getEachFieldToFixed2(array ,'watching'))\n\t\t\t\t.toObject()\n\t\t]\n\t});\n}\n",
		"//@ts-check\n/// <reference path=\"../types/index.d.ts\" />\n\nlet {\n\tconvertUnit2Hour,\n\torderByWatchingTime,\n\tobject2array,\n\tgetEachFieldToFixed2\n} = require('../utils'), {\n\tcreateEChartsSeries,\n\tGRID_NORMAL\n} = require('../echartsUtils');\n\nconst COLORS = ['#a5d6a7', '#80cbc4', '#90caf9', '#80deea', '#ef9a9a', '#ffcc80', '#bcaaa4', '#b0bec5'];\nconst COLORS_OTHER = ['#a5d6a7', '#80cbc4', '#90caf9', '#80deea', '#ef9a9a', '#d6d6d6'];\n\nconst SELECTOR = '#chartLanguage';\n\nlet otherLanguages = '';\nfunction tooltipFormatter(p, ticket, set) {\n\tlet setText = text => (setTimeout(set, 1, ticket, text), text);\n\treturn setText(`You spent<br/> <b>${p.percent}%</b> time` +\n\t\t`<br/>(<b>${p.value}</b> hours)<br/> on ${p.name == 'other' ? otherLanguages : p.name} `);\n}\n\n/**\n * @type {EChartsObject}\n */\nlet charts = null;\n\nmodule.exports = { update };\n\nfunction update(dataGroupByLanguage) {\n\tif (!charts) charts = echarts.init($(SELECTOR)[0]);\n\n\tlet data = convertUnit2Hour(dataGroupByLanguage),\n\t\tarray = orderByWatchingTime(object2array(data), true/*DESC*/);\n\n\tlet i0 = 5, i1 = array.length;\n\tfor (let i = i0 + 1; i < i1; i++) {\n\t\tarray[i0].watching += array[i].watching;\n\t\tarray[i0].coding += array[i].coding;\n\t}\n\tif (i1 > i0) {\n\t\totherLanguages = array.slice(i0, i0 + 5).map(it => it.name).join(', ') + '...';\n\t\tarray[i0].name = 'other';\n\t\tarray.length = i0 + 1;\n\t}\n\t\n\tcharts.setOption({\n\t\tcolor: i1 > i0 ? COLORS_OTHER : COLORS,\n\t\tgrid: GRID_NORMAL,\n\t\ttooltip: { trigger: 'item', formatter: tooltipFormatter },\n\t\tseries: [\n\t\t\tcreateEChartsSeries('pie', 'watching')\n\t\t\t\t.setLabelBold()\t\n\t\t\t\t.setLabels(array.map(it => it.name))\n\t\t\t\t.setValues(getEachFieldToFixed2(array, 'watching'))\n\t\t\t\t.toObject()\n\t\t]\n\t});\n}\n",
		"//@ts-check\n/// <reference path=\"../types/index.d.ts\" />\n\nlet {\n\tconvertUnit2Hour,\n\torderByWatchingTime,\n\torderByName,\n\tobject2array,\n\tgetEachFieldToFixed2,\n\texpandGroupByDaysObject,\n\tgetShortProjectName,\n\tmerge\n} = require('../utils'), {\n\tcreateEChartsSeries,\n\tAXIS_HOURS,\n\tGRID_NORMAL,\n} = require('../echartsUtils'), {\n\tfill\n} = require('../form');\n\nconst SELECTOR_0 = '#chartOneProjectDays',\n\tSELECTOR_1 = '#chartOneProjectLanguages',\n\tSELECTOR_2 = '#chartOneProjectFiles',\n\tDIALOG_SELECTOR = '#dlgOneProject';\n\nconst CLASS_RANGE_DEFAULT = 'btn-default',\n\tCLASS_RANGE_SELECTED = 'btn-primary';\n\nfunction tooltipFormatter0(p, ticket, set){\n\tlet setText = text => (setTimeout(set, 1, ticket, text), text);\n\tif (p.componentType == 'markLine') //average\n\t\treturn setText(`Average ${p.seriesName} for <b>${p.value}</b> hours`);\n\telse if (p.componentType == 'markPoint')\n\t\treturn setText(`Longest ${p.seriesName} for <b>${p.value}</b> hours` +\n\t\t\t`<br/>in ${dateLabels[p.data.coord[0]]}`)\n\telse if (Array.isArray(p) && p.length == 2)\n\t\treturn setText(`In ${p[0].name}:<br/>` +\n\t\t\tp.map(it => `${it.seriesName} for <b>${it.value}</b> hours`).join('<br/>'));\n\treturn setText(null);\n}\n\nfunction tooltipFormatter2(p, ticket, set) {\n\tlet setText = text => (setTimeout(set, 1, ticket, text), text);\n\tlet i = p.dataIndex;\n\tif (i >= fileNames.length) return setText(null);\n\treturn setText(`You spent<br/> (<b>${p.value}</b> hours)<br/> on <u>${fileNames[i]}</u>`);\n}\n\n/**\n * @type {EChartsObject}\n */\nlet charts0 = null, charts1 = null, charts2 = null;\nlet $dlg = null;\n/**\n* @type {APIResponse}\n*/\nlet allData = null;\nlet reportDays = 7, projName = '', projPath = '',\n\tfilesRange = 10;\n\nlet dateLabels = [], fileNames = [];\n\nmodule.exports = { update, setRange };\nfunction update(data, _reportDays) {\n\tif (!$dlg) {\n\t\t$dlg = $(DIALOG_SELECTOR);\n\t\t$dlg.on('shown.bs.modal', () => {\n\t\t\tprojPath = decodeURIComponent(Object.keys(data.groupBy.project)[0]);\n\t\t\tprojName = getShortProjectName(projPath);\n\t\t\tfill($dlg, {projName, projPath, reportDays: _reportDays})\n\t\t\t\n\t\t\tupdateDaysReport();\n\t\t\tupdateFilesReport();\n\t\t});\n\t}\n\tallData = data;\n\treportDays = _reportDays;\n\t$dlg.modal();\n}\nfunction setRange(range) {\n\tfilesRange = Number(range);\n\tlet $btns = $dlg.find('.range-block [data-range]');\n\t$btns.removeClass(CLASS_RANGE_SELECTED).addClass(CLASS_RANGE_DEFAULT);\n\t$btns.filter(`[data-range=${range}]`)\n\t\t.addClass(CLASS_RANGE_SELECTED).removeClass(CLASS_RANGE_DEFAULT);\n\tupdateFilesReport();\n}\n//==============================\n//         Charts\n//==============================\n\nfunction updateDaysReport() {\n\tif (!charts0) charts0 = echarts.init($(SELECTOR_0)[0]);\n\n\tlet today = new Date(),\n\t\tstartDate = new Date(today);\n\tstartDate.setDate(startDate.getDate() - reportDays + 1);\n\t\t\n\tlet groupByDayData = $.extend(true, {}, allData.groupBy.day),\n\t\tsummaryData = expandGroupByDaysObject(groupByDayData, startDate, today);\n\n\tlet data = convertUnit2Hour(summaryData),\n\t\tarray = orderByName(object2array(data));\n\tdateLabels = array.map(it => it.name);\n\tconsole.log(groupByDayData);\n\t\n\tcharts0.setOption({\n\t\txAxis: { data: dateLabels },\n\t\tyAxis: merge(AXIS_HOURS, { boundaryGap: [0, 0.2] }),\n\t\tgrid: GRID_NORMAL,\n\t\ttooltip: { trigger: 'axis', formatter: tooltipFormatter0 },\n\t\tseries: [\n\t\t\tcreateEChartsSeries('line', 'watching')\n\t\t\t\t.showMaxMarkPoint('max time')\n\t\t\t\t.showAverageLine('average time')\n\t\t\t\t.setLineSmooth()\n\t\t\t\t.setLineColor('#66bb6a')\n\t\t\t\t.setItemColor('#66bb6a')\n\t\t\t\t.setAreaColor('#c8e6c9')\n\t\t\t\t.setValues(getEachFieldToFixed2(array, 'watching'))\n\t\t\t\t.toObject(),\n\t\t\tcreateEChartsSeries('line', 'coding')\n\t\t\t\t.showMaxMarkPoint('max time')\n\t\t\t\t.showAverageLine('average time')\n\t\t\t\t.setLineSmooth()\n\t\t\t\t.setLineColor('#1b5e20')\n\t\t\t\t.setItemColor('#1b5e20')\n\t\t\t\t.setAreaColor('#388e3c')\n\t\t\t\t.setValues(getEachFieldToFixed2(array ,'coding'))\n\t\t\t\t.toObject()\n\t\t]\n\t});\n}\n\nfunction updateFilesReport() {\n\tif (!charts2) charts2 = echarts.init($(SELECTOR_2)[0]);\n\tlet data = convertUnit2Hour(allData.groupBy.file),\n\t\tarray = orderByWatchingTime(object2array(data)),\n\t\tdisplayFileNames = [];\n\tif (filesRange) array = array.slice(-filesRange);\n\n\tlet height = array.length * 50;\n\t$(SELECTOR_2).height(height);\n\tcharts2.resize({ height });\n\n\tfileNames = array.map(it => decodeURIComponent(it.name));\n\tdisplayFileNames = fileNames.map((name, i) =>\n\t\tname + ` (${Number(array[i].watching).toFixed(2)} hs)`);\n\t\n\tcharts2.setOption({\n\t\tlegend: { data: [''] },\n\t\txAxis: {\n\t\t\ttype: 'value', nameLocation: 'end', position: 'top',\n\t\t\taxisTick: { show: false }, axisLabel: AXIS_HOURS.axisLabel },\n\t\tyAxis: {\n\t\t\ttype: 'category', nameLocation: 'start',\n\t\t\t// interval: 0 for force display all label\n\t\t\taxisTick: { show: false }, axisLabel: { inside: true, interval: 0 }, z: 2048,\n\t\t\tdata: displayFileNames },\n\t\tgrid: GRID_NORMAL,\n\t\ttooltip: { trigger: 'item', formatter: tooltipFormatter2},\n\t\tseries: [\n\t\t\tcreateEChartsSeries('bar', 'watching')\n\t\t\t\t.setItemColor('#E4F6FE')\n\t\t\t\t.setValues(getEachFieldToFixed2(array ,'watching'))\n\t\t\t\t.add({ itemStyle: { normal: {borderColor: '#CAEDFD'}}})\n\t\t\t\t.toObject()\n\t\t]\n\t});\n}\n",
		"//@ts-check\n/// <reference path=\"../types/index.d.ts\" />\n\nlet {\n\tconvertUnit2Hour,\n\torderByWatchingTime,\n\tobject2array,\n\tgetEachFieldToFixed2,\n\tgetShortProjectName,\n} = require('../utils'), {\n\tcreateEChartsSeries,\n\tAXIS_HOURS,\n\tGRID_NORMAL\n} = require('../echartsUtils');\n\nconst SELECTOR = '#chartProject';\nconst SIZE = 5;\n\n/**\n* @type {string[]}\n*/\nlet originalProjectNames = [], projectNames = [], shortProjectNames = [];\n\nfunction tooltipFormatter(p, ticket, set) {\n\tlet setText = text => (setTimeout(set, 1, ticket, text), text);\n\tlet i = p.dataIndex;\n\tif (i >= projectNames.length) return setText(null);\n\treturn setText(`You spent<br/> (<b>${p.value}</b> hours)<br/> on <u>${projectNames[i]}</u>`);\n}\n\n/**\n * @type {EChartsObject}\n */\nlet charts = null;\n\nmodule.exports = { update };\n\nfunction update(dataGroupByProject) {\n\tif (!charts) {\n\t\tcharts = echarts.init($(SELECTOR)[0]);\n\t\tcharts.on('click', params =>\n\t\t\ttypeof params.dataIndex == 'number' &&\n\t\t\tglobal.app.openProjectReport(originalProjectNames[params.dataIndex]));\n\t}\n\n\tlet data = convertUnit2Hour(dataGroupByProject),\n\t\tarray = orderByWatchingTime(object2array(data)).slice(-SIZE);\n\toriginalProjectNames = array.map(it => it.name);\n\tprojectNames = array.map(it => decodeURIComponent(it.name));\n\tshortProjectNames = projectNames.map((name, i) =>\n\t\tgetShortProjectName(name) + ` (${Number(array[i].watching).toFixed(2)} hs)`);\n\n\tcharts.setOption({\n\t\tlegend: { data: [''] },\n\t\txAxis: {\n\t\t\ttype: 'value', nameLocation: 'end', position: 'top',\n\t\t\taxisTick: { show: false }, axisLabel: AXIS_HOURS.axisLabel },\n\t\tyAxis: {\n\t\t\ttype: 'category', nameLocation: 'start',\n\t\t\taxisTick: { show: false }, axisLabel: { inside: true }, z: 1024,\n\t\t\tdata: shortProjectNames },\n\t\tgrid: GRID_NORMAL,\n\t\ttooltip: { trigger: 'item', formatter: tooltipFormatter},\n\t\tseries: [\n\t\t\tcreateEChartsSeries('bar', 'watching')\n\t\t\t\t.setItemColor('#fff59d')\n\t\t\t\t.setValues(getEachFieldToFixed2(array ,'watching'))\n\t\t\t\t.toObject()\n\t\t]\n\t});\n}\n",
		"//@ts-check\n/// <reference path=\"../types/index.d.ts\" />\n\nlet {\n\tconvertUnit2Hour,\n\torderByName,\n\tobject2array,\n\tgetEachFieldToFixed2,\n\tmerge\n} = require('../utils'), {\n\tcreateEChartsSeries,\n\tAXIS_HOURS,\n\tGRID_NORMAL\n} = require('../echartsUtils');\n\nlet dateLabels = [];\n\nconst SELECTOR = '#chartSummary';\nfunction tooltipFormatter(p, ticket, set){\n\tlet setText = text => (setTimeout(set, 1, ticket, text), text);\n\tif (p.componentType == 'markLine') //average\n\t\treturn setText(`Average ${p.seriesName} for <b>${p.value}</b> hours`);\n\telse if (p.componentType == 'markPoint')\n\t\treturn setText(`Longest ${p.seriesName} for <b>${p.value}</b> hours` +\n\t\t\t`<br/>in ${dateLabels[p.data.coord[0]]}`)\n\telse if (Array.isArray(p) && p.length == 2)\n\t\treturn setText(`In ${p[0].name}:<br/>` +\n\t\t\tp.map(it => `${it.seriesName} for <b>${it.value}</b> hours`).join('<br/>'));\n\treturn setText(null);\n}\n\n/**\n * @type {EChartsObject}\n */\nlet charts = null;\n\nmodule.exports = { update };\n\nfunction update(dataGroupByDate) {\n\tif (!charts) charts = echarts.init($(SELECTOR)[0]);\n\n\tlet data = convertUnit2Hour(dataGroupByDate),\n\t\tarray = orderByName(object2array(data));\n\tdateLabels = array.map(it => it.name);\n\n\tcharts.setOption({\n\t\txAxis: { data: dateLabels },\n\t\tyAxis: merge(AXIS_HOURS, { boundaryGap: [0, 0.2] }),\n\t\tgrid: GRID_NORMAL,\n\t\ttooltip: { trigger: 'axis', formatter: tooltipFormatter},\n\t\tseries: [\n\t\t\tcreateEChartsSeries('line', 'watching')\n\t\t\t.showMaxMarkPoint('max time')\n\t\t\t.showAverageLine('average time')\n\t\t\t.setLineSmooth()\n\t\t\t.setLineColor('#66bb6a')\n\t\t\t.setItemColor('#66bb6a')\n\t\t\t.setAreaColor('#c8e6c9')\n\t\t\t.setValues(getEachFieldToFixed2(array ,'watching'))\n\t\t\t.toObject(),\n\n\t\t\tcreateEChartsSeries('line', 'coding')\n\t\t\t.showMaxMarkPoint('max time')\n\t\t\t.showAverageLine('average time')\n\t\t\t.setLineSmooth()\n\t\t\t.setLineColor('#1b5e20')\n\t\t\t.setItemColor('#1b5e20')\n\t\t\t.setAreaColor('#388e3c')\n\t\t\t.setValues(getEachFieldToFixed2(array ,'coding'))\n\t\t\t.toObject()\n\t\t]\n\t});\n}\n",
		"module.exports = {\n\tcreateEChartsSeries,\n\tAXIS_HOURS: { axisLabel: { formatter: '{value} hs' } },\n\tAXIS_MINUTES: { axisLabel: { formatter: '{value} mins' } },\n\tGRID_NORMAL: { left: '20', right: '20', bottom: '10', top: '10', containLabel: true },\n\tGRID_HORIZON_BAR: {left: '10', right: '20', bttom: '5', top: '5', containLabel: true}\n};\n\n/**\n * @param {string} type \n * @param {string} name \n * @returns  {EChartsSeriesCreator}\n */\nfunction createEChartsSeries(type, name) {\n\tlet chains = {};\n\tlet object = { type, name };\n\tlet exportFunctions = {\n\t\tshowMaxMarkPoint: name => object.markPoint = { data: [{ type: 'max', name }] },\n\t\tshowAverageLine: name => object.markLine = { data: [{ type: 'average', name }] },\n\t\tsetLineSmooth: () => object.smooth = true,\n\n\t\tsetLineColor: color => object.lineStyle = { normal: { color } },\n\t\tsetItemColor: color => object.itemStyle = { normal: { color } },\n\t\tsetAreaColor: color => object.areaStyle = { normal: { color } },\n\n\t\tsetTooltip: formatter => object.tooltip = { formatter },\n\t\tsetLabelBold: () => object.label = { normal: { textStyle: { fontWeight: 'bold' } } },\n\t\t\n\t\tsetLabels: labels => object.data\n\t\t\t? object.data.forEach((it, i) => it.name = labels[i])\n\t\t\t: (object.data = labels.map(name => ({ name }))),\n\t\tsetValues: values => object.data\n\t\t\t? object.data.forEach((it, i) => it.value = values[i])\n\t\t\t: (object.data = values.map(value => ({ value }))),\n\t\t\n\t\tadd: (...options) => $.extend(true, object, ...options)\n\t};\n\n\tchains.toObject = () => object;\n\tfor (let name in exportFunctions)\n\t\tchains[name] = (...p) => (exportFunctions[name](...p), chains);\n\treturn chains;\n}",
		"//@ts-check\n\n/**\n * @param {JQuery} $form\n * @return {Object}\n */\nfunction encode($form) {\n\tlet result = {};\n\t$form.find('[name]').each((i, ele) => {\n\t\tlet $input = $(ele),\n\t\t\tv = hasValAttr($input) ? $input.val() : $input.text();\n\t\tif ($input.data('ignore')) return;\n\t\tresult[$input.attr('name')] = v;\n\t});\n\treturn result;\n}\n\n/**\n * @param {JQuery} $form \n * @param {Object} data \n */\nfunction fill($form, data) {\n\tdata = data || {};\n\t$form.find('[name]').each((i, ele) => {\n\t\tlet $input = $(ele),\n\t\t\tkey = $input.attr('name'),\n\t\t\tv = (data[key] || '');\n\t\tif ($input.data('ignore')) return;\n\t\thasValAttr($input) ? $input.val(v) : $input.text(v);\n\t});\n}\n\n/**\n * @param {JQuery} $dom \n */\nfunction isValueTag($dom) { return hasValAttr($dom); }\n\n/**\n * @param {JQuery} $dom \n */\nfunction hasValAttr($dom) { \n\tlet tagName = $dom.prop('tagName');\n\treturn tagName == 'INPUT' || tagName == 'TEXTAREA' || tagName == 'SELECT'; \n}\n\nmodule.exports = {\n\tencode, fill, isValueTag\n};",
		"//@ts-check\n\nconst STORAGE_NAME = 'coding-tracker-i18n';\nconst HAS_LS = require('./utils').hasLocalStorage();\nlet languages = {\n\t'zh-cn': require('./i18n/zh-cn'),\n\t'zh-tw': require('./i18n/zh-tw')\n}, language = '';\n\nfunction storageGet(key) { return HAS_LS ? localStorage.getItem(key) : null; }\nfunction storageSet(key, value) { HAS_LS && localStorage.setItem(key, value); }\n\nfunction update() {\n\tlanguage = storageGet(STORAGE_NAME) || '';\n\tif (language in languages) {\n\t\tlet data = languages[language];\n\t\tlet $items = $('[data-i18n]');\n\t\tlet english = 'en' in languages ? null : {};\n\t\tfor (let i = 0, i1 = $items.length; i < i1; i++){\n\t\t\tlet $item = $items.eq(i),\n\t\t\t\tname = $item.data('i18n');\n\t\t\tif (name in data) {\n\t\t\t\t//get default english text\n\t\t\t\tenglish && (english[name] = $item.text());\n\t\t\t\t$item.text(data[name]);\n\t\t\t}\n\t\t}\n\t\tenglish && (languages.en = english);\n\t}\n}\n\nfunction setLanguage(lang) {\n\tstorageSet(STORAGE_NAME, lang);\n\tupdate();\n}\n\nfunction get(key) {\n\tlet data = languages[language]\n\treturn data && data[key];\n}\n\nmodule.exports = {\n\tupdate,\n\tsetLanguage,\n\tget,\n\tget language() { return language }\n};",
		"module.exports = {\n\ttitle_summary: '编程时间总结',\n\ttitle_24hs: '24小时总结',\n\ttitle_projects: '项目耗时',\n\ttitle_projects_tip: '(点击图表项目查看详细)',\n\ttitle_languages: '按语言分类',\n\ttitle_files: '文件耗时',\n\ttitle_computers: '按计算机分类',\n\ttitle_welcome: '欢迎来到报告页面',\n\n\ttitle_share: '分享',\n\n\ttitle_author: '作者',\n\ttitle_version: '版本',\n\ttitle_help: '帮助',\n\ttitle_license: '开源协议',\n\ttitle_components: '相关组件',\n\ttitle_connect: '链接',\n\t\n\ttitle_server_version: '服务器版本:',\n\ttitle_storage_version: '存储文件版本:',\n\n\ttitle_files_in_proj: '项目中的文件:',\n\ttitle_last_xx_days: '最近',\n\n\ttitle_totally_1: '合计: ',\n\ttitle_totally_2: '小时. 专注时间:',\n\ttitle_totally_3: '小时',\n\t\n\tfull_report: '完整报告',\n\n\toption_7_days: '7天',\n\toption_30_days: '30天',\n\toption_365_days: '365天',\n\n\tword_top: '前',\n\tword_all: '全部',\n\tword_day: '天',\n\n\tlink_github_repo_server: 'Github仓库(服务器端代码)',\n\tlink_github_repo_extension: 'Github仓库(VSCode插件端代码)',\n\tlink_vscode_marketplace: 'VSCode插件市场',\n\n\tshow_welcome: '欢迎/帮助信息',\t\n\t\n\t//Welcome Info\n\twelcome_subtitle: '这是VSCode Coding Tracker的编程情况报告页面, 你能在这儿看到你日常的编程情况统计',\n\twelcome_intro: '简介:',\n\twelcome_watching_time: '你使用(查看)VSCode的时长 (包括Coding time)',\n\twelcome_coding_time: '你在VSCode中写代码(敲键盘)的时长',\n\twelcome_tips: '提示:',\n\twelcome_tips_click_hover_title: '将鼠标放到或点击图表项',\n\twelcome_tips_click_hover: '将鼠标放到图表项上以获得详细信息. 点击项目图表项可以查看针对某个项目的详细报告',\n\twelcome_tips_language_title: '更换页面语言',\n\twelcome_tips_language: '在页面上方可更换语言, 在这个图标旁:',\n\twelcome_contribution: '帮助改进:',\n\twelcome_contribution_1: '如果你有什么好的点子 或 发现了一些bug/缺陷. 欢迎给这个项目提交 ',\n\twelcome_contribution_2: ' 或 ',\n\twelcome_btn_close: 'OK. 隐藏这个欢迎信息',\n\twelcome_reopen: '你可以点击页面底部的\"欢迎/帮助信息\"以重新显示这个信息',\n\n\t//share\n\tshare_content: '分享文本',\n\tshare_font_size: '字号',\n\tshare_mark_line: '标记线',\n\tshare_mark_line_max: '最大值',\n\tshare_mark_line_average: '平均值',\n\tshare_mark_line_min: '最小值',\n\tshare_tip: '点击图表上的项目可 添加/删除 标记点',\n\tshare_btn: '保存为图片分享'\n};",
		"module.exports = {\n\ttitle_summary: '編程時間總結',\n\ttitle_24hs: '24小時總結',\n\ttitle_projects: '項目耗時',\n\ttitle_projects_tip: '(點擊圖表項目查看詳細)',\n\ttitle_languages: '按語言分類',\n\ttitle_files: '文件耗時',\n\ttitle_computers: '按計算機分類',\n\ttitle_welcome: '歡迎來到報告頁面',\n\n\ttitle_share: '分享',\t\n\t\n\ttitle_author: '作者',\n\ttitle_version: '版本',\n\ttitle_help: '幫助',\n\ttitle_license: '開源協議',\n\ttitle_components: '相關組件',\n\ttitle_connect: '鏈接',\n\t\n\ttitle_server_version: '服務器版本:',\n\ttitle_storage_version: '存儲文件版本:',\n\n\ttitle_files_in_proj: '項目中的文件:',\n\ttitle_last_xx_days: '最近',\n\n\ttitle_totally_1: '合計:',\n\ttitle_totally_2: '小時. 專注時間:',\n\ttitle_totally_3: '小時',\n\t\n\tfull_report: '完整報告',\n\n\toption_7_days: '7天',\n\toption_30_days: '30天',\n\toption_365_days: '365天',\n\n\tword_top: '前',\n\tword_all: '全部',\n\tword_day: '天',\n\n\tlink_github_repo_server: 'Github倉庫(服務器端代碼)',\n\tlink_github_repo_extension: 'Github倉庫(VSCode插件端代碼)',\n\tlink_vscode_marketplace: 'VSCode插件市場',\n\n\tshow_welcome: '歡迎/幫助信息',\t\n\t\n\t//Welcome Info\n\twelcome_subtitle: '這是VSCode Coding Tracker的編程情況報告頁面, 你能在這兒看到你日常的編程情況統計',\n\twelcome_intro: '簡介:',\n\twelcome_watching_time: '你使用(查看)VSCode的時長 (包括Coding time)',\n\twelcome_coding_time: '你在VSCode中寫代碼(敲鍵盤)的時長',\n\twelcome_tips: '提示:',\n\twelcome_tips_click_hover_title: '將鼠標放到或點擊圖表項',\n\twelcome_tips_click_hover: '將鼠標放到圖表項上以獲得詳細信息. 點擊項目圖表項可以查看針對某個項目的詳細報告',\n\twelcome_tips_language_title: '更換頁面語言',\n\twelcome_tips_language: '在頁面上方可更換語言, 在這個圖標旁:',\n\twelcome_contribution: '幫助改進:',\n\twelcome_contribution_1: '如果你有什麼好的點子 或 發現了一些bug/缺陷. 歡迎給這個項目提交',\n\twelcome_contribution_2: '或',\n\twelcome_btn_close: 'OK. 隱藏這個歡迎信息',\n\twelcome_reopen: '你可以點擊頁面底部的\"歡迎/幫助信息\"以重新顯示這個信息',\n\n\t//share\n\tshare_content: '分享文本',\n\tshare_font_size: '字號',\n\tshare_mark_line: '標記線',\n\tshare_mark_line_max: '最大值',\n\tshare_mark_line_average: '平均值',\n\tshare_mark_line_min: '最小值',\n\tshare_tip: '點擊圖表上的項目可 添加/刪除 標記點',\n\tshare_btn: '保存為圖片分享'\n};",
		"//@ts-check\n/// <reference path=\"types/index.d.ts\" />\n\nfunction App() {\n\tconst VERSION_KEY = 'coding-tracker-version';\t\n\n\tlet Utils = require('./utils'),\n\t\tstatus = require('./statusDialog').init(),\n\t\turl = require('./url').init(),\n\t\ti18n = require('./i18n'),\n\t\tshare = require('./share');\n\n\tlet chart = {\n\t\tsummary: require('./charts/summary'),\n\t\tlast24hours: require('./charts/24hours'),\n\t\tcomputer: require('./charts/computer'),\n\t\tlanguage: require('./charts/language'),\n\t\tproject: require('./charts/project'),\n\t\tfile: require('./charts/file'),\n\t\tallProjects: require('./charts/all_projects'),\n\t\tallLanguages: require('./charts/all_languages'),\n\t\toneProject: require('./charts/one_project')\n\t};\n\n\t/**\n\t * @type {APIResponse}\n\t */\n\tlet basicReportData = null;\n\n\tlet $reportDateRange = $('#selectReportDateRange'),\n\t\t$i18nSelector = $('#selectI18N'),\n\t\t$welcomeInfo = $('#welcomeInfo'),\n\t\treportDays = 7,\n\t\tcurrentServerVersion = '';\n\t\n\t$reportDateRange.on('change', requestBasicReportData);\n\t$i18nSelector.on('change', () => i18n.setLanguage($i18nSelector.val()));\n\n\ti18n.update();\n\t$i18nSelector.val(i18n.language || 'eng');\n\n\trequestBasicReportData();\n\trequestLast24hsReportData();\n\treqesutVersionInfo();\n\t\n\t// export functions\n\tthis.share = share;\n\n\tthis.showAllProjects = showAllProjectsReport;\n\tthis.showAllLangs = showAllLanguagesReport;\n\tthis.setAllLangs = setAllLangaugesDisplayRange;\n\tthis.setFilesInProj = setFilesInProjectRange;\n\tthis.openProjectReport = openProjectReport;\n\tthis.hideWelcome = hideWelcome;\n\tthis.showWelcome = showWelcome;\n\tthis.shareSummary = shareSummary;\n\t//============================\n\t//           Functions\n\t//============================\n\tfunction showAllProjectsReport() { chart.allProjects.update(basicReportData.groupBy.project) }\n\tfunction showAllLanguagesReport() { chart.allLanguages.update(basicReportData.groupBy.language) }\n\tfunction setAllLangaugesDisplayRange(range) { chart.allLanguages.setRange(range)}\n\tfunction setFilesInProjectRange(range) { chart.oneProject.setRange(range); }\n\n\tfunction openProjectReport(projectName) {\n\t\trequestAPI(url.getProjectReportDataURL(reportDays, projectName),\n\t\t\tdata => chart.oneProject.update(data, reportDays), true);\n\t}\n\n\tfunction hideWelcome() { $welcomeInfo.slideUp(); localStorage.setItem(VERSION_KEY, currentServerVersion); }\n\tfunction showWelcome() { $welcomeInfo.slideDown(); }\n\tfunction reqesutVersionInfo() {\n\t\t$.get('/', info => {\n\t\t\tcurrentServerVersion = info.serverVersion;\n\t\t\t$('#version [name]').each((i, e) => $(e).text(info[$(e).attr('name')]))\n\t\t\tUtils.hasLocalStorage() &&\n\t\t\t\tlocalStorage.getItem(VERSION_KEY) != currentServerVersion && \n\t\t\t\tshowWelcome();\n\t\t});\n\t}\n\n\tfunction shareSummary() {\n\t\tshare.shareSummary(getSummaryDataFromBasicData(basicReportData), basicReportData.total);\n\t}\n\n\tfunction requestBasicReportData() {\n\t\treportDays = Number($reportDateRange.val());\n\t\trequestAPI(url.getBasicReportDataURL(reportDays), genChartsFromBasicResportData);\n\t}\n\n\tfunction requestLast24hsReportData() {\n\t\tlet now = Date.now();\n\t\trequestAPI(url.getLast24HoursDataURL(now), genLast24HoursChart);\n\t\tfunction genLast24HoursChart(data) {\n\t\t\tchart.last24hours.update(Utils.expandAndShortGroupByHoursObject(data.groupBy.hour, now));\n\t\t\tshowTotalTimes(data.total, $('#counterLast24Hs'));\n\t\t}\n\t}\n\n\tfunction getSummaryDataFromBasicData(basicReportData) {\n\t\tlet today = new Date(),\n\t\t\tstartDate = new Date(today);\n\t\tstartDate.setDate(startDate.getDate() - reportDays + 1);\n\t\t\n\t\tlet groupByDayData = $.extend(true, {}, basicReportData.groupBy.day),\n\t\t\tsummaryData = Utils.expandGroupByDaysObject(groupByDayData, startDate, today);\n\t\treturn summaryData;\n\t}\n\n\tfunction genChartsFromBasicResportData(data) {\n\t\tbasicReportData = data;\n\t\n\t\tchart.summary.update(getSummaryDataFromBasicData(data));\n\t\tshowTotalTimes(data.total, $('#counterSummary'));\n\n\t\tchart.computer.update(data.groupBy.computer);\n\t\tchart.language.update(data.groupBy.language);\n\t\tchart.project.update(data.groupBy.project);\n\t\tchart.file.update(data.groupBy.file);\n\t}\n\n\t/**\n\t * @param {WatchingCodingObject} totalObject \n\t * @param {JQuery} $dom \n\t */\n\tfunction showTotalTimes(totalObject, $dom) {\n\t\tlet data = Utils.convertUnit2Hour({ total: totalObject }).total;\n\t\t$dom.find('[name]').each((i, e) => $(e).text(Number(data[$(e).attr('name')]).toFixed(2)));\n\t}\n\n\tfunction requestAPI(url, success, noLoadingDialog) {\n\t\tnoLoadingDialog || status.loading();\n\t\t$.ajax({\n\t\t\tmethod: 'GET', url,\n\t\t\tsuccess: data => (success(data), status.hide()),\n\t\t\terror: displayError\n\t\t});\n\t}\n\n\tfunction displayError(error) {\n\t\tlet info = '',\n\t\t\tgetXHRInfo = () => `\\n  readyState: ${error.readyState}\\n  status: ${error.status}\\n  statusText: ${error.statusText}`;\n\t\tif (error) {\n\t\t\tif (('readyState' in error && error.readyState < 4) ||\n\t\t\t\t('status' in error && error.status != 200))\n\t\t\t\tinfo = `Network exception!` + getXHRInfo();\t\n\t\t\tif (error.responseJSON && typeof error.responseJSON.error == 'string')\n\t\t\t\tinfo = `Server response:\\n  ${error.responseJSON.error}`;\n\t\t}\n\t\t//@ts-ignore\n\t\tif (!info) info = error;\n\t\tstatus.failed(info);\n\t}\n}\nglobal.app = new App();",
		"//@ts-check\n/// <reference path=\"types/index.d.ts\" />\n/// <reference path=\"types/echarts.d.ts\" />\n\nlet {\n\tconvertUnit2Hour,\n\torderByName,\n\tobject2array,\n\tgetEachFieldToFixed2,\n\tmerge\n} = require('./utils'), {\n\tcreateEChartsSeries,\n\tAXIS_HOURS\n} = require('./echartsUtils'), {\n\tencode, fill\n} = require('./form');\n\n/**\n * @type {JQuery}\n */\nlet $dlgShare = null;\n\n/**\n * @type {HTMLLinkElement}\n */\n//@ts-ignore\nlet downloader = $('#chartImageDownloader')[0];\n\n/**\n * @type {EChartsObject}\n */\nlet chart = null;\n\n/**\n * @type {EChartOption}\n */\nlet chartOptions = null;\n\nlet formData = { text: '', fontSizeMain: '24', fontSizeSub: '18' };\nlet chartDownloadOption = { backgroundColor: '#ffffff' };\n\nlet delayUpdateToken = null;\nconst DELAY_UPDATE_TIME = 300;\n\nfunction saveChart() {\n\tdownloader.href = chart.getDataURL(chartDownloadOption);\n\t//@ts-ignore\n\tdownloader.download = \"chart.png\";\n\tdownloader.click();\n}\n\nfunction shareSummary(dataGroupByDate, total) {\n\tlet data = convertUnit2Hour(dataGroupByDate),\n\t\tarray = orderByName(object2array(data));\n\tlet dateLabels = array.map(it => it.name),\n\t\ttotalHs = convertUnit2Hour({ total }).total.watching.toFixed(2),\n\t\tdays = array.length,\n\t\taverageHs = (totalHs / days).toFixed(2);\n\tformData.text = `My Coding Report\\n  ${totalHs} hours in last ${days} days. ` +\n\t\t`(Average: ${averageHs} hours/day)`;\n\tchartOptions = {\n\t\txAxis: { data: dateLabels },\n\t\tyAxis: merge(AXIS_HOURS, { boundaryGap: [0, 0.2] }),\n\t\tgrid: {top: 100, left: 20, right: 30, bottom: 20, containLabel: true}, \n\t\tseries: [\n\t\t\tcreateEChartsSeries('line', 'watching')\n\t\t\t\t.showMaxMarkPoint('max time')\n\t\t\t\t.setLineSmooth()\n\t\t\t\t.setLineColor('#66bb6a')\n\t\t\t\t.setItemColor('#66bb6a')\n\t\t\t\t.setAreaColor('#c8e6c9')\n\t\t\t\t.setValues(getEachFieldToFixed2(array, 'watching'))\n\t\t\t\t.toObject()\n\t\t]\n\t};\n\t// console.log(chartOptions);\n\tshow();\n}\n\nfunction delayUpdate(delayTime) {\n\tdelayUpdateToken && clearTimeout(delayUpdateToken);\n\tdelayUpdateToken = setTimeout(updateChartOption, delayTime || DELAY_UPDATE_TIME);\n}\nfunction updateChartOption() {\n\tlet content = encode($dlgShare),\n\t\t[text, subtext] = content.text.trim().split('\\n'),\n\t\tfontSizeMain = Number(content.fontSizeMain) || 24,\n\t\tfontSizeSub = Number(content.fontSizeSub) || 18;\n\tchartOptions.title = {\n\t\ttext, subtext,\n\t\ttextStyle: { fontSize: fontSizeMain },\n\t\tsubtextStyle: { fontSize: fontSizeSub }\n\t};\n\tlet markLines = [];\n\t$dlgShare.find('.btn-markline.btn-success')\n\t\t.each((i, ele) => {\n\t\t\tlet type = $(ele).data('type'),\n\t\t\t\tlabel = { position: 'middle', formatter: `${type}: {c} hs` };\n\t\t\tmarkLines.push({ type, label: { normal: label , emphasis: label} })\n\t\t});\n\t//@ts-ignore\n\tchartOptions.series[0].markLine = { data: markLines };\n\t//@ts-ignore\n\tchartOptions.grid.top = (fontSizeMain + fontSizeSub ) * 1.8;\n\tchart.setOption(chartOptions);\n}\n\n/**\n * @param {JQuery} $dom \n */\nfunction onMarkLineBtnClick($dom) {\n\t$dom.toggleClass('btn-success').toggleClass('btn-default');\n\tupdateChartOption();\n}\nfunction onChartClick(params) {\n\tif (!params) return;\n\t//@ts-ignore\n\tlet points = chartOptions.series[0].markPoint;\n\tif (params.componentType == \"markPoint\") {\n\t\t//remove mark point\n\t\tpoints.data = points.data.filter(it => it.name != params.name);\n\t} else if (params.componentType == 'series') {\n\t\t//add mark point\n\t\tpoints.data.push({\n\t\t\tname: `custom_${Date.now()}`,\n\t\t\txAxis: params.dataIndex, yAxis: params.value\n\t\t});\n\t}\n\tupdateChartOption();\n}\n\nfunction show() {\n\tif (!$dlgShare) {\n\t\t$dlgShare = $('#dlgShare');\n\t\t$dlgShare.on('shown.bs.modal', () => {\n\t\t\tif (!chart) {\n\t\t\t\tchart = echarts.init($('#chartShare')[0]);\n\t\t\t\tchart.on('click', onChartClick);\n\t\t\t}\n\t\t\tfill($dlgShare, formData);\t\t\n\t\t\tupdateChartOption();\n\t\t});\n\t}\n\t$dlgShare.modal();\n}\n\nmodule.exports = {\n\tshareSummary,\n\tsaveChart, delayUpdate,\n\tonMarkLineBtnClick\n};",
		"//@ts-check\nfunction init() {\n\tlet $dlg = $('#dlgStatus'),\n\t\t\n\t\t$title = $dlg.find('.modal-title'),\n\t\t\n\t\t$loading = $dlg.find('.alert-info'),\n\t\t$error = $dlg.find('.alert-danger'),\n\t\t\n\t\t$errorReason = $error.find('code'),\n\t\t\n\t\tshow = () => $dlg.modal({ keyboard: false, backdrop: 'static' }),\n\t\thide = () => $dlg.modal('hide');\n\t\n\treturn { loading, failed, hide: delayHide };\n\n\tfunction loading(){\n\t\t$title.text('Loading report...');\n\t\t$loading.show();\n\t\t$error.hide();\n\t\tshow();\n\t}\n\t\n\tfunction failed(error){\n\t\t$title.text('Load Failed!');\n\t\t$loading.hide();\n\t\t$error.show();\n\t\t$errorReason.html(typeof error == 'string' ? error: JSON.stringify(error, null, '  '));\n\t\tshow();\n\t}\n\tfunction delayHide() {\n\t\tsetTimeout(hide, 50);\n\t}\n}\nmodule.exports = {init};",
		"//@ts-check\n\nconst BASE = '/ajax/report';\nlet APIToken = '';\n\nlet exportObject = {\n\tinit: () => {\n\t\tAPIToken = (location.href.match(/[\\?\\&]token\\=(.+?)(\\&|$)/) || ['', ''])[1];\n\t\treturn exportObject;\n\t},\n\tgetBasicReportDataURL: (reportDays) =>\n\t\t`${BASE}/recent?days=${reportDays}&token=${APIToken}`,\n\tgetLast24HoursDataURL: (now) =>\n\t\t`${BASE}/last24hs?ts=${now}&token=${APIToken}`,\n\tgetProjectReportDataURL: (reportDays, project) =>\n\t\t`${BASE}/project?project=${project}&days=${reportDays}&token=${APIToken}`\n\n};\nmodule.exports = exportObject;",
		"//@ts-check\n/// <reference path=\"types/index.d.ts\" />\n/// <reference path=\"types/echarts.d.ts\" />\n\nlet Utils = {\n\texpandGroupByDaysObject: (obj, startDate, endDate) => {\n\t\tstartDate = new Date(startDate);\n\t\tif (startDate.getTime() > endDate.getTime())\n\t\t\tthrow new Error('startDate could not bigger than endDate');\t\n\t\tvar endDateString = getYYYYMMDD(endDate),\t\n\t\t\tcursorDateString = '';\n\t\tvar result = {};\n\t\tdo {\n\t\t\tcursorDateString = getYYYYMMDD(startDate)\n\t\t\tresult[cursorDateString] = obj[cursorDateString] || getEmptyCodingWatchingObject();\n\t\t\tstartDate.setDate(startDate.getDate() + 1);\n\t\t} while (endDateString > cursorDateString);\n\t\treturn result; \t\n\t},\n\t\n\texpandAndShortGroupByHoursObject: (obj, dayDate) => {\n\t\tvar result = {}, i = 24,\n\t\t\tcursorDate = new Date(dayDate),\n\t\t\tcursorDateString = '';\n\t\twhile (i--) {\n\t\t\tcursorDateString = getHHMM(cursorDate);\n\t\t\tresult[cursorDateString] = obj[cursorDateString] || getEmptyCodingWatchingObject();\n\t\t\tcursorDate.setHours(cursorDate.getHours() - 1);\n\t\t}\n\t\treturn result;\n\t},\n\n\torderByName,\n\torderByWatchingTime,\n\t\t\n\tobject2array,\n\n\tconvertUnit2Hour: data => convertTimeUnits(data, 3600 * 1000),\n\tconvertUnit2Minutes: data => convertTimeUnits(data, 60 * 1000),\n\n\tgetEachFieldToFixed2,\n\tgenerateChartOption,\n\n\tmerge,\n\tgetShortProjectName,\n\n\thasLocalStorage\n};\nmodule.exports = Utils;\n\nfunction hasLocalStorage() { return typeof localStorage != 'undefined'; }\n\nfunction getEmptyCodingWatchingObject() { return { coding: 0, watching: 0 }; }\n\n/**\n * @param {string} projectName \n * @returns  {string}\n */\nfunction getShortProjectName(projectName) { return (projectName.match(/.*(^|[\\\\\\/])(.+)$/) || [0, 0, projectName])[2] }\n\n/**\n * @param {string|number} num \n * @returns {string}\n */\nfunction to2(num) { return num == 0 ? '00' : num < 10 ? `0${num}` : `${num}` }\n/**\n * @param {Date} date \n * @returns {string}\n */\nfunction getYYYYMMDD(date){ return `${date.getFullYear()}-${to2(date.getMonth() + 1)}-${to2(date.getDate())}`}\n/**\n * @param {Date} date \n * @returns {string}\n */\nfunction getHHMM(date) { return `${getYYYYMMDD(date)} ${to2(date.getHours())}:00` }\n\n/**\n * @param {any[]} array \n * @param {boolean} [desc]\n * @returns {any[]}\n */\nfunction orderByName(array, desc) {\n\tlet v0 = desc ? -1 : 1, v1 = -v0;\n\tarray.sort((a, b) => a.name > b.name ? v0 : v1);\n\treturn array;\n}\n/**\n * @param {any[]} array \n * @param {boolean} [desc]\n * @returns {any[]}\n */\nfunction orderByWatchingTime(array, desc) {\n\tarray.sort(desc ? (a, b) => b.watching - a.watching : (a, b) => a.watching - b.watching);\n\treturn array;\n}\n/**\n * convert object to array. each array item has a \"name\" field\n * @param {Object} object \n * @returns Object[]\n */\nfunction object2array(object) {\n\treturn Object.keys(object).map(name => { object[name].name = name; return object[name]; });\n}\n\n/**\n * Get each field of item in the array. and .toFixed(2)\n * @param {any[]} array \n * @param {string} fieldName \n */\nfunction getEachFieldToFixed2(array, fieldName) {\n\treturn array.map(it => Number(it[fieldName]).toFixed(2));\n}\n\n/**\n * @param {string} name \n * @param {'line'|'pie'|'bar'} type \n * @param {object} data \n * @param {any[]} options\n * @returns {EChartOption}\n */\nfunction generateChartOption(name, type, data, ...options) {\n\treturn $.extend(true, {}, { name, type, data }, ...options);\n}\n/**\n * convert each value in data(object) coding/watching time unit from ms to minValue.\n * such as 120 × 1000 => 2 (minValue=60 × 1000)\n * @param {object|any[]} data \n * @param {number} minValue \n * @returns  {any}\n */\nfunction convertTimeUnits(data, minValue) {\n\tlet result = Array.isArray(data) ? [] : {};\n\tfor (let key in data) {\n\t\tlet it = data[key];\n\t\tresult[key] = {\n\t\t\tcoding: it.coding / minValue,\n\t\t\twatching: it.watching / minValue\n\t\t};\n\t}\n\treturn result;\n}\n/**\n * @param {any[]} objects \n * @returns any\n */\nfunction merge(...objects) {\n\treturn $.extend(true, {}, ...objects);\n}"
	]
}