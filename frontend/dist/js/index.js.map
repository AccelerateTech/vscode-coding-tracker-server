{
	"version": 3,
	"sources": [
		"../../../../../../../../usr/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js",
		"../../src/js/charts.js",
		"../../src/js/index.js",
		"../../src/js/loadingDialog.js",
		"../../src/js/utils.js",
		"../../src/js/version.js"
	],
	"names": [],
	"mappings": "AAAA;;;;;;;;;;;ACAA,oBACA;uBACA;AACA;AACA,mGACA;sDACA;wGACA;2DACA,AACA;kGACA;qDACA;uGACA;0DACA,AACA;sDACA;sDACA,AACA;;;AACA;8GACA;;AACA;mGACA,AACA;qEACA;sEACA;mDACA;4BACA;yFACA;sDACA;wDACA,AACA;;yBACA;0BACA;0BACA;0BACA;yBACA;sBACA;mDACA;qDACA;qDACA;mDACA;6CACA;qDACA,AACA,AACA;;4CACA;iDACA;kCACA;2BACA;6BACA;kBACA,wCACA,2CACA;;oBAEA;uDACA;WACA;yBACA;aACA,iDACA,0EACA,8DACA,kFACA,AACA,AACA,AACA;AAZA;AAaA,AACA;;6CACA;oDACA;kCACA;2BACA;6BACA;kBACA,wCACA,2CACA;mCACA;;oBAEA;yDACA;WACA;yBACA;aACA,iDACA,wEACA,8DACA,gFACA,AACA,AACA;AAXA;AAYA,AACA,AACA;;iDACA;iDACA;2FACA;6BACA;4EACA;;YAEA;WACA;yBACA;aACA,+DACA,AACA,AACA;AAPA;AAQA,AACA;;iDACA;iDACA;2FACA;6BACA;4EACA;;YAEA;WACA;yBACA;aACA,+DACA,AACA,AACA;AAPA;AAQA,AACA;;+CACA;iDACA;wBACA,8DACA,iBACA;kFACA;6BACA;yDACA;;sBAEA;WACA;;4DAEA;iEACA;YACA,AACA;AAJA;;0DAMA;8EACA,AACA;AAHA;yBAIA;aACA,2CACA,0BACA,AACA,AACA;AAjBA;AAkBA,AACA;;yCACA;iDACA;wBACA,2DACA,iBACA;kFACA;6BACA;yDACA;;sBAEA;WACA;;yDAEA;iEACA;YACA,AACA;AAJA;;0DAMA;8EACA,AACA;AAHA;yBAIA;aACA,2CACA,0BACA,AACA,AACA;AAjBA;AAkBA,AACA,AACA;;oBACA;sBACA;0CACA,yBACA;uBACA;AACA,AACA;;AACA;;;AC1LA;AACA,AACA;;AACA,kBACA;wBACA;gCACA;yBACA;yCACA,AACA;;qBACA;wBACA,AACA;;AACA;iFACA,AACA;;kBACA;2FACA;sFACA;AACA,AACA;;AACA,AACA,AACA;;;4CACA,AACA;;6BACA;qBACA,AACA;;kCACA,AACA,AACA;;AACA;AACA;AACA,AACA;;0CACA;0CACA,AACA;;mBACA;;cAEA;WACA;6CACA;0CACA,AACA;AALA;AAMA,AACA;;2CACA;oBACA;;cAEA;iCACA;+BACA;0CACA,AACA,AACA;AANA;;4BAOA;uFACA;AACA;+EACA;2HACA,AACA;AACA;AACA,AACA,AACA;;yCACA,AACA;;cACA,wDACA;WACA,mEACA,AACA;;AACA;qBACA;8BACA;0DACA;0DACA;0EACA;2BACA,AACA;;AACA;8EACA;yHACA,AACA;;AACA,AACA;;AACA;yCACA;AACA;yCACA,AACA;;wCACA,AACA;;qCACA,AACA;;mBACA;AACA;;AACA;;;ACnGA;AACA,6CACA;cACA;0BACA;4BACA;0BACA;kCACA;4DACA;+BACA,AACA;;wBACA;gBACA;aACA;WACA;AACA;AACA,AACA;;0BACA;gBACA;aACA;WACA;kDACA;AACA;AACA,AACA;;eACA;;AACA;;AC3BA;oCAEA,AACA;;8DACA,AACA;;gHACA;4FACA,AACA;;oDACA,AACA;;yDACA;yBACA;sCACA,2BACA;8CACA;2BACA;iBACA;OACA;8CACA;+DACA;6CACA;6BACA;WACA;AACA;uDACA;;YACA;8BACA;2BACA;gBACA;kDACA;+DACA;iDACA;AACA;WACA;AACA,AACA;;wCACA;6BACA;0BACA;qBACA;qDACA;yDACA;AACA;WACA;AACA;2CACA;0BACA;0BACA;qBACA;oDACA;wDACA;AACA;WACA;AACA,AACA;;kHACA;4GACA;4GACA,AACA;;AA1DA;AA2DA;;AC5DA;AACA,gCACA;6BACA;yCACA;0CACA;AACA;;AACA",
	"file": "generated.js",
	"sourceRoot": "",
	"sourcesContent": [
		"(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
		"function Charts() {\n\tlet Utils = require('./utils');\n\t//configurations\n\tconst\n\t\tGREEN_LINE = { itemStyle: { normal: { color: '#66bb6a' } }, lineStyle: { normal: { color: '#66bb6a' } } },\n\t\tGREEN_AREA = { areaStyle: { normal: { color: '#c8e6c9' } } },\n\t\tDARK_GREEN_LINE = { itemStyle: { normal: { color: '#1b5e20' } }, lineStyle: { normal: { color: '#1b5e20' } } },\n\t\tDARK_GREEN_AREA = { areaStyle: { normal: { color: '#388e3c' } } },\n\t\t\n\t\tBLUE_LINE = { itemStyle: { normal: { color: '#29b6f6' } }, lineStyle: { normal: { color: '#29b6f6' } } },\n\t\tBLUE_AREA = { areaStyle: { normal: { color: '#b3e5fc' } } },\n\t\tDARK_BLUE_LINE = { itemStyle: { normal: { color: '#01579b' } }, lineStyle: { normal: { color: '#01579b' } } },\n\t\tDARK_BLUE_AREA = { areaStyle: { normal: { color: '#0288d1' } } },\n\n\t\tYELLOW_BAR = { itemStyle: { normal: { color: '#fff59d' } } },\n\t\tPURPLE_BAR = { itemStyle: { normal: { color: '#ce93d8' } } },\n\n\t\t//lighten-3\n\t\tCOLOR_PALETTE_1 = ['#a5d6a7', '#80cbc4', '#90caf9', '#80deea', '#ef9a9a', '#fff59d', '#ffcc80', '#bcaaa4' ,'#b0bec5'],\n\t\t//normal\n\t\tCOLOR_PALETTE_2 = ['#4caf50', '#2196f3', '#ffeb3b', '#f44336', '#9c27b0', '#009688', '#ff9800', '#795548'],\n\n\t\tMAX_MARK_POINT = { markPoint: { data: [{ type: 'max', name: 'max time' }] } },\n\t\tAVERAGE_LINE = { markLine: { data: [{ type: 'average', name: 'average time' }] } },\n\t\tPIE_NO_LABEL = { label: { normal: { show: false } } },\n\t\tSMOOTH = { smooth: true },\n\t\tNORMAL_GRID = { left: '20', right: '20', bottom: '10', top: '10', containLabel: true },\n\t\tAXIS_LABEL_HOURS = { axisLabel: { formatter: '{value} hs' } },\n\t\tAXIS_LABEL_MINUTES = { axisLabel: { formatter: '{value} mins' } };\n\n\tvar $chartSummary = $('#chartSummary'),\n\t\t$chartLast24Hs = $('#chartLast24Hs'),\n\t\t$chartComputer = $('#chartComputer'),\n\t\t$chartLanguage = $('#chartLanguage'),\n\t\t$chartProject = $('#chartProject'),\n\t\t$chartFile = $('#chartFile'),\n\t\techartsSummary = echarts.init($chartSummary[0]),\n\t\techartsComputer = echarts.init($chartComputer[0]),\n\t\techartsLanguage = echarts.init($chartLanguage[0]),\n\t\techartsProject = echarts.init($chartProject[0]),\n\t\techartsFile = echarts.init($chartFile[0]),\n\t\techartsLast24Hs = echarts.init($chartLast24Hs[0]);\n\n\t\n\tthis.setSummaryData = dataGroupByDate => {\n\t\tvar data = Utils.convertGroupByDataUnit2Hour(dataGroupByDate),\n\t\t\txText = Object.keys(data).sort(),\n\t\t\tcodingTimeValues = [],\n\t\t\twatchingTimeValues = [];\n\t\txText.forEach(key =>\n\t\t\t(codingTimeValues.push(data[key].coding),\n\t\t\t\twatchingTimeValues.push(data[key].watching)));\n\t\techartsSummary.setOption({\n\t\t\txAxis: { data: xText },\n\t\t\tyAxis: group(AXIS_LABEL_HOURS, {boundaryGap: [0, 0.2]}),\n\t\t\tgrid: NORMAL_GRID,\n\t\t\ttooltip: { trigger: 'axis' },\n\t\t\tseries: [\n\t\t\t\tUtils.genLineChartSeriesOption('Watching time', watchingTimeValues,\n\t\t\t\t\tgroup(SMOOTH, GREEN_AREA, GREEN_LINE, MAX_MARK_POINT, AVERAGE_LINE)),\n\t\t\t\tUtils.genLineChartSeriesOption('Coding time', codingTimeValues,\n\t\t\t\t\tgroup(SMOOTH, DARK_GREEN_AREA, DARK_GREEN_LINE, MAX_MARK_POINT, AVERAGE_LINE))\n\t\t\t]\n\t\t});\n\t\t\n\t};\n\n\tthis.setLast24HsData = dataGroupByHour => {\n\t\tvar data = Utils.convertGroupByDataUnit2Minutes(dataGroupByHour),\n\t\t\txText = Object.keys(data).sort(),\n\t\t\tcodingTimeValues = [],\n\t\t\twatchingTimeValues = [];\n\t\txText.forEach(key =>\n\t\t\t(codingTimeValues.push(data[key].coding),\n\t\t\t\twatchingTimeValues.push(data[key].watching)));\n\t\txText = xText.map(v => v.slice(11));\n\t\techartsLast24Hs.setOption({\n\t\t\txAxis: { data: xText },\n\t\t\tyAxis: group(AXIS_LABEL_MINUTES, {boundaryGap: [0, 0.2]}),\n\t\t\tgrid: NORMAL_GRID,\n\t\t\ttooltip: { trigger: 'axis' },\n\t\t\tseries: [\n\t\t\t\tUtils.genLineChartSeriesOption('Watching time', watchingTimeValues,\n\t\t\t\t\tgroup(SMOOTH, BLUE_AREA, BLUE_LINE, MAX_MARK_POINT, AVERAGE_LINE)),\n\t\t\t\tUtils.genLineChartSeriesOption('Coding time', codingTimeValues,\n\t\t\t\t\tgroup(SMOOTH, DARK_BLUE_AREA, DARK_BLUE_LINE, MAX_MARK_POINT, AVERAGE_LINE))\n\t\t\t]\n\t\t});\n\t};\n\n\n\tthis.setComputerData = dataGroupByComputer => {\n\t\tvar data = Utils.convertGroupByDataUnit2Hour(dataGroupByComputer);\n\t\tvar xText = Object.keys(dataGroupByComputer).sort((a, b) => data[a].watching - data[b].watching),\n\t\t\twatchingTimeValues = [];\n\t\txText.forEach(name => watchingTimeValues.push({ name, value:data[name].watching }));\n\t\techartsComputer.setOption({\n\t\t\tcolor: COLOR_PALETTE_2,\n\t\t\tgrid: NORMAL_GRID,\n\t\t\ttooltip: { trigger: 'item' },\n\t\t\tseries: [\n\t\t\t\tUtils.genPieSeriesOption('Watching time', watchingTimeValues, {})\n\t\t\t]\n\t\t});\n\t};\n\n\tthis.setLanguageData = dataGroupByLanguage => {\n\t\tvar data = Utils.convertGroupByDataUnit2Hour(dataGroupByLanguage);\n\t\tvar xText = Object.keys(dataGroupByLanguage).sort((a, b) => data[a].watching - data[b].watching),\n\t\t\twatchingTimeValues = [];\n\t\txText.forEach(name => watchingTimeValues.push({ name, value: data[name].watching }));\n\t\techartsLanguage.setOption({\n\t\t\tcolor: COLOR_PALETTE_2,\n\t\t\tgrid: NORMAL_GRID,\n\t\t\ttooltip: { trigger: 'item' },\n\t\t\tseries: [\n\t\t\t\tUtils.genPieSeriesOption('Watching time', watchingTimeValues, {})\n\t\t\t]\n\t\t});\n\t};\n\n\tthis.setProjectData = dataGroupByProject => {\n\t\tvar data = Utils.convertGroupByDataUnit2Hour(dataGroupByProject);\n\t\tvar y = Object.keys(dataGroupByProject)\n\t\t\t.sort((a, b) => data[a].watching - data[b].watching)\n\t\t\t.slice(-6),\t\n\t\t\tyText = y.map(name => decodeURIComponent(name).match(/.*(^|[\\\\\\/])(.+)$/)[2]),\n\t\t\twatchingTimeValues = [];\n\t\ty.forEach(name => watchingTimeValues.push(data[name].watching));\n\t\techartsProject.setOption({\n\t\t\tlegend: { data: [''] },\n\t\t\tgrid: NORMAL_GRID,\n\t\t\tyAxis: {\n\t\t\t\ttype: 'category', name: 'Project name', nameLocation: 'start',\n\t\t\t\taxisTick: { show: false }, axisLabel: { inside: true }, z: 1024,\n\t\t\t\tdata: yText\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\ttype: 'value', name: 'Watching Time', nameLocation: 'end',\n\t\t\t\tposition: 'top', axisTick: { show: false }, axisLabel: AXIS_LABEL_HOURS.axisLabel\n\t\t\t},\n\t\t\ttooltip: { trigger: 'item' },\n\t\t\tseries: [\n\t\t\t\tUtils.genBarSeriesOption('Watching time', watchingTimeValues,\n\t\t\t\t\tgroup(YELLOW_BAR))\n\t\t\t]\n\t\t});\n\t};\n\n\tthis.setFileData = dataGroupByFile => {\n\t\tvar data = Utils.convertGroupByDataUnit2Hour(dataGroupByFile);\n\t\tvar y = Object.keys(dataGroupByFile)\n\t\t\t.sort((a, b) => data[a].watching - data[b].watching)\n\t\t\t.slice(-6);\n\t\tvar yText = y.map(name => decodeURIComponent(name).match(/.*(^|[\\\\\\/])(.+)$/)[2]),\n\t\t\twatchingTimeValues = [];\n\t\ty.forEach(name => watchingTimeValues.push(data[name].watching));\n\t\techartsFile.setOption({\n\t\t\tlegend: { data: [''] },\n\t\t\tgrid: NORMAL_GRID,\n\t\t\tyAxis: {\n\t\t\t\ttype: 'category', name: 'File name', nameLocation: 'start',\n\t\t\t\taxisTick: { show: false }, axisLabel: { inside: true }, z: 1024,\n\t\t\t\tdata: yText\n\t\t\t},\n\t\t\txAxis: {\n\t\t\t\ttype: 'value', name: 'Watching Time', nameLocation: 'end',\n\t\t\t\tposition: 'top', axisTick: { show: false }, axisLabel: AXIS_LABEL_HOURS.axisLabel\n\t\t\t},\n\t\t\ttooltip: { trigger: 'item' },\n\t\t\tseries: [\n\t\t\t\tUtils.genBarSeriesOption('Watching time', watchingTimeValues,\n\t\t\t\t\tgroup(PURPLE_BAR))\n\t\t\t]\n\t\t});\n\t};\n\n\t\n\tfunction group() {\n\t\tvar args = [true, {}];\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t\targs.push(arguments[i]);\t\n\t\treturn $.extend(...args);\n\t}\n\n}\nmodule.exports = Charts;",
		"//@ts-check\n/// <reference path=\"type.d.ts\" />\n\nfunction App() {\n\tlet Utils = require('./utils'),\n\t\tLoadingDialog = require('./loadingDialog'),\n\t\tCharts = require('./charts'),\n\t\t{ displayVersionInfo } = require('./version');\n\n\tvar reportDays = 7,\n\t\treportProject = null;\n\n\t//get API token passing by query string\n\tvar APIToken = (location.href.match(/[\\?\\&]token\\=(.+?)(\\&|$)/)||['',''])[1]\n\t\n\tvar baseURL = '/ajax/report',\n\t\tgetBaseReportDataURL = () => `${baseURL}/recent?days=${reportDays}&token=${APIToken}`,\n\t\tgetLast24HoursDataURL = (now) => `${baseURL}/last24hs?ts=${now}&token=${APIToken}`;\n\t\t// getProjectReportDataURL = () => `${baseURL}/project?project=${reportProject}&days=${reportDays}&token=${APIToken}`;\n\n\t/**\n\t* @type {ClassLoadingDialog}\n\t*/\n\tlet loadingDialog = new LoadingDialog($('#statusDialog'));\n\n\tlet $reportDateRange = $('#selectReportDateRange');\t\n\tlet charts = new Charts();\n\t\n\t$reportDateRange.on('change', startAjaxGetBaseReportData);\n\t\n\t\n\tstartAjaxGetBaseReportData();\n\tstartAjaxGetLast24HoursData();\n\tdisplayVersionInfo();\n\t\n\tfunction startAjaxGetBaseReportData() {\n\t\treportDays = Number($reportDateRange.val());\n\n\t\tloadingDialog.loading();\n\t\t$.ajax({\n\t\t\tmethod: 'GET',\n\t\t\turl: getBaseReportDataURL(),\n\t\t\tsuccess: data => handlerBaseReportData(data),\n\t\t\terror: data => loadingDialog.failed(data)\n\t\t});\n\t}\n\t\n\tfunction startAjaxGetLast24HoursData() {\n\t\tvar now = Date.now();\n\t\t$.ajax({\n\t\t\tmethod: 'GET',\n\t\t\turl: getLast24HoursDataURL(now),\n\t\t\tsuccess: data => handler(data),\n\t\t\terror: data => loadingDialog.failed(data)\t\t\t\n\t\t})\n\n\t\tfunction handler(data) {\n\t\t\tcharts.setLast24HsData(Utils.expandAndShortGroupByHoursObject(data.groupBy.hour, now));\n\t\t\t//last 24 hours counter\n\t\t\tvar totalData = Utils.convertGroupByDataUnit2Hour({ total: data.total }).total;\n\t\t\t$('#counterLast24Hs').html(`total: watching time: <b>${totalData.watching}</b> hs. coding time: <b>${totalData.coding}</b> hs`);\n\n\t\t}\t\n\t}\n\n\t\n\tfunction handlerBaseReportData(data) {\n\n\t\tif (data.error)\n\t\t\treturn loadingDialog.failed($.extend(true, data, {\n\t\t\t\ttip: 'You can visit private report page by passing token like this: ' +\n\t\t\t\t\t'`http://domain:port/report/?token=${YOUR TOKEN}`' }));\n\n\t\t//-----------show summary chart--------\n\t\tvar today = new Date();\n\t\tvar startDate = new Date(today);\n\t\tstartDate.setDate(startDate.getDate() - reportDays + 1);\n\t\tvar groupByDayData = $.extend(true, {}, data.groupBy.day);\n\t\tvar data1 = Utils.expandGroupByDaysObject(groupByDayData, startDate, today);\n\t\tcharts.setSummaryData(data1);\n\t\t\n\t\t//summary counter\n\t\tvar totalData = Utils.convertGroupByDataUnit2Hour({ total: data.total }).total;\n\t\t$('#counterSummary').html(`total: watching time: <b>${totalData.watching}</b> hs. coding time: <b>${totalData.coding}</b> hs`);\n\n\t\t//-------------------------------------\n\t\t\n\t\t//-----------computer chart------------\n\t\tcharts.setComputerData(data.groupBy.computer);\n\t\t//-------------------------------------\n\t\tcharts.setLanguageData(data.groupBy.language);\n\n\t\tcharts.setProjectData(data.groupBy.project);\n\n\t\tcharts.setFileData(data.groupBy.file);\n\t\t\n\t\tloadingDialog.hide();\n\t}\n}\nglobal.app = new App();",
		"//@ts-check\nfunction LoadingDialog(loadStatusDlgJQDom) {\n\tvar $dlg = loadStatusDlgJQDom,\n\t\t$title = $dlg.find('.modal-title'),\n\t\t$loading = $dlg.find('.alert-info'),\n\t\t$error = $dlg.find('.alert-danger'),\n\t\t$errorReason = $error.find('code'),\n\t\tshow = () => $dlg.modal({ keyboard: false, backdrop: 'static' }),\n\t\thide = () => $dlg.modal('hide');\n\t\n\tthis.loading = () => {\n\t\t$title.text('Loading report...');\n\t\t$loading.show();\n\t\t$error.hide();\n\t\tshow();\n\t}\n\t\n\tthis.failed = error => {\n\t\t$title.text('Load Failed!');\n\t\t$loading.hide();\n\t\t$error.show();\n\t\t$errorReason.html(JSON.stringify(error, null, '  '));\n\t\tshow();\n\t}\n\t\n\tthis.hide = hide;\n}\nmodule.exports = LoadingDialog;",
		"let Utils = {\n\tlog: data => (console.log(data), data),\n\n\tto2: num => num == 0 ? '00' : num < 10 ? `0${num}` : `${num}`,\n\t\n\tdate2dateString: date => `${date.getFullYear()}-${Utils.to2(date.getMonth() + 1)}-${Utils.to2(date.getDate())}`,\n\tdate2dateHourString: date => `${Utils.date2dateString(date)} ${Utils.to2(date.getHours())}:00`,\n\t\n\tgetZeroTimeObject: () => ({ coding: 0, watching: 0 }),\n\t\n\texpandGroupByDaysObject: (obj, startDate, endDate) => {\n\t\tstartDate = new Date(startDate);\n\t\tif (startDate.getTime() > endDate.getTime())\n\t\t\tthrow new Error('startDate could not bigger than endDate');\t\n\t\tvar endDateString = Utils.date2dateString(endDate),\t\n\t\t\tcursorDateString = '';\n\t\tvar result = {};\n\t\tdo {\n\t\t\tcursorDateString = Utils.date2dateString(startDate)\n\t\t\tresult[cursorDateString] = obj[cursorDateString] || Utils.getZeroTimeObject();\n\t\t\tstartDate.setDate(startDate.getDate() + 1);\n\t\t} while (endDateString > cursorDateString);\n\t\treturn result; \t\n\t},\n\texpandAndShortGroupByHoursObject: (obj, dayDate) => {\n\t\tvar result = {}, i = 24,\n\t\t\tcursorDate = new Date(dayDate),\n\t\t\tcursorDateString = '';\n\t\twhile (i--) {\n\t\t\tcursorDateString = Utils.date2dateHourString(cursorDate);\n\t\t\tresult[cursorDateString] = obj[cursorDateString] || Utils.getZeroTimeObject();\n\t\t\tcursorDate.setHours(cursorDate.getHours() - 1);\n\t\t}\n\t\treturn result;\n\t},\n\n\tconvertGroupByDataUnit2Hour: data => {\n\t\tconst MS_1_HOUR = 3600 * 1000;\n\t\tfor (var key in data) {\n\t\t\tvar item = data[key];\n\t\t\titem.coding = (item.coding / MS_1_HOUR).toFixed(2);\n\t\t\titem.watching = (item.watching / MS_1_HOUR).toFixed(2);\n\t\t}\n\t\treturn data;\n\t},\n\tconvertGroupByDataUnit2Minutes: data => {\n\t\tconst MS_1_MIN = 60 * 1000;\n\t\tfor (var key in data) {\n\t\t\tvar item = data[key];\n\t\t\titem.coding = (item.coding / MS_1_MIN).toFixed(2);\n\t\t\titem.watching = (item.watching / MS_1_MIN).toFixed(2);\n\t\t}\n\t\treturn data;\n\t},\n\n\tgenLineChartSeriesOption: (name, data, extendOption) => $.extend(true, extendOption || {}, { name, data, type: 'line' }),\n\tgenPieSeriesOption: (name, data, extendOption) => $.extend(true, extendOption || {}, { name, data, type: 'pie' }),\n\tgenBarSeriesOption: (name, data, extendOption) => $.extend(true, extendOption || {}, { name, data, type: 'bar' })\n\t\n};\nmodule.exports = Utils;",
		"//@ts-check\nfunction displayVersionInfo() {\n\t$.get('/', versionInfo => {\n\t\t$('#versionServer').text(versionInfo.serverVersion);\n\t\t$('#versionStorage').text(versionInfo.storageVersion);\n\t})\n}\nmodule.exports = { displayVersionInfo };"
	]
}